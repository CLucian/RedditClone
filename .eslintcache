[{"/Users/lucc/development/git/reddit-clone/src/index.js":"1","/Users/lucc/development/git/reddit-clone/src/serviceWorker.js":"2","/Users/lucc/development/git/reddit-clone/src/App.js":"3","/Users/lucc/development/git/reddit-clone/src/components/authorize.component.jsx":"4","/Users/lucc/development/git/reddit-clone/src/components/GlobalState.jsx":"5","/Users/lucc/development/git/reddit-clone/src/components/about.component.jsx":"6","/Users/lucc/development/git/reddit-clone/src/components/errorPage.component.jsx":"7","/Users/lucc/development/git/reddit-clone/src/components/Login.jsx":"8","/Users/lucc/development/git/reddit-clone/src/components/home.component.jsx":"9","/Users/lucc/development/git/reddit-clone/src/components/test.jsx":"10","/Users/lucc/development/git/reddit-clone/src/components/search/HomeWrapper.jsx":"11","/Users/lucc/development/git/reddit-clone/src/components/search/MasterSearchProvider.jsx":"12","/Users/lucc/development/git/reddit-clone/src/components/search/MasterSearch.jsx":"13","/Users/lucc/development/git/reddit-clone/src/components/navigation/Sidebar.jsx":"14","/Users/lucc/development/git/reddit-clone/src/components/navigation/navbar.component.jsx":"15","/Users/lucc/development/git/reddit-clone/src/components/navigation/TopNavbar.jsx":"16","/Users/lucc/development/git/reddit-clone/src/components/profile/profile.component.jsx":"17","/Users/lucc/development/git/reddit-clone/src/components/profile/SubscribedSubreddits.jsx":"18","/Users/lucc/development/git/reddit-clone/src/components/modal/PostContainer.jsx":"19","/Users/lucc/development/git/reddit-clone/src/components/profile/Subreddit.jsx":"20","/Users/lucc/development/git/reddit-clone/src/components/posting/CreatePostPage.jsx":"21","/Users/lucc/development/git/reddit-clone/src/queries/auth.js":"22","/Users/lucc/development/git/reddit-clone/src/utils/login.js":"23","/Users/lucc/development/git/reddit-clone/src/queries/axios.js":"24","/Users/lucc/development/git/reddit-clone/src/queries/postQuery.js":"25","/Users/lucc/development/git/reddit-clone/src/utils/pagination.js":"26","/Users/lucc/development/git/reddit-clone/src/queries/feed.js":"27","/Users/lucc/development/git/reddit-clone/src/queries/subredditSearch.js":"28","/Users/lucc/development/git/reddit-clone/src/components/post.component.jsx":"29","/Users/lucc/development/git/reddit-clone/src/components/posting/CreatePost.jsx":"30","/Users/lucc/development/git/reddit-clone/src/components/modal/Modal.jsx":"31","/Users/lucc/development/git/reddit-clone/src/components/profile/SubredditLinks.jsx":"32","/Users/lucc/development/git/reddit-clone/src/components/profile/ProfileComments.jsx":"33","/Users/lucc/development/git/reddit-clone/src/components/search/SubredditSearch.jsx":"34","/Users/lucc/development/git/reddit-clone/src/components/profile/SubredditList.jsx":"35","/Users/lucc/development/git/reddit-clone/src/components/modal/PostModal.jsx":"36","/Users/lucc/development/git/reddit-clone/src/components/search/SearchSubreddit.jsx":"37","/Users/lucc/development/git/reddit-clone/src/components/svg-components/BestSVG.jsx":"38","/Users/lucc/development/git/reddit-clone/src/components/svg-components/HotSVG.jsx":"39","/Users/lucc/development/git/reddit-clone/src/components/svg-components/NewSVG.jsx":"40","/Users/lucc/development/git/reddit-clone/src/components/svg-components/RisingSVG.jsx":"41","/Users/lucc/development/git/reddit-clone/src/components/svg-components/TopSVG.jsx":"42","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Users.jsx":"43","/Users/lucc/development/git/reddit-clone/src/components/svg-components/SearchSVG.jsx":"44","/Users/lucc/development/git/reddit-clone/src/queries/querySubreddits.js":"45","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Bubble.jsx":"46","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Heart.jsx":"47","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Author.jsx":"48","/Users/lucc/development/git/reddit-clone/src/components/svg-components/DownArrow.jsx":"49","/Users/lucc/development/git/reddit-clone/src/components/svg-components/UpArrow.jsx":"50","/Users/lucc/development/git/reddit-clone/src/components/svg-components/PostSVG.jsx":"51","/Users/lucc/development/git/reddit-clone/src/components/search/SubredditInfo.jsx":"52","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Close.jsx":"53","/Users/lucc/development/git/reddit-clone/src/components/comments/Comments.jsx":"54","/Users/lucc/development/git/reddit-clone/src/components/Video/Video.jsx":"55","/Users/lucc/development/git/reddit-clone/src/utils/comments.js":"56","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Loader.jsx":"57","/Users/lucc/development/git/reddit-clone/src/components/comments/Comment.jsx":"58","/Users/lucc/development/git/reddit-clone/src/components/comments/CommentReply.jsx":"59","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Collapse.jsx":"60","/Users/lucc/development/git/reddit-clone/src/components/svg-components/UnCollapse.jsx":"61","/Users/lucc/development/git/reddit-clone/src/components/comments/CommentReplyInput.jsx":"62","/Users/lucc/development/git/reddit-clone/src/components/comments/CommentEditInput.jsx":"63","/Users/lucc/development/git/reddit-clone/src/queries/postPage.js":"64","/Users/lucc/development/git/reddit-clone/src/components/Video/Twitch.jsx":"65","/Users/lucc/development/git/reddit-clone/src/queries/postModal.js":"66","/Users/lucc/development/git/reddit-clone/src/queries/sideBar.js":"67","/Users/lucc/development/git/reddit-clone/src/queries/createPostPage.js":"68","/Users/lucc/development/git/reddit-clone/src/queries/profile.js":"69","/Users/lucc/development/git/reddit-clone/src/queries/profileComments.js":"70","/Users/lucc/development/git/reddit-clone/src/queries/subscribedSubreddits.js":"71","/Users/lucc/development/git/reddit-clone/src/queries/comment.js":"72","/Users/lucc/development/git/reddit-clone/src/queries/commentEditInput.js":"73","/Users/lucc/development/git/reddit-clone/src/queries/commentReplyInput.js":"74","/Users/lucc/development/git/reddit-clone/src/queries/comments.js":"75","/Users/lucc/development/git/reddit-clone/src/components/comments/PostComment.jsx":"76","/Users/lucc/development/git/reddit-clone/src/queries/postComment.js":"77","/Users/lucc/development/git/reddit-clone/src/components/navigation/SearchForSubreddit.jsx":"78","/Users/lucc/development/git/reddit-clone/src/components/navigation/SubredditListing.jsx":"79","/Users/lucc/development/git/reddit-clone/src/queries/subscribe.js":"80","/Users/lucc/development/git/reddit-clone/src/components/profile/User.jsx":"81","/Users/lucc/development/git/reddit-clone/src/queries/profilePosts.js":"82","/Users/lucc/development/git/reddit-clone/src/components/profile/ProfilePostsList.jsx":"83","/Users/lucc/development/git/reddit-clone/src/components/profile/ProfilePost.jsx":"84"},{"size":884,"mtime":1605739125782,"results":"85","hashOfConfig":"86"},{"size":5086,"mtime":1600197189451,"results":"87","hashOfConfig":"86"},{"size":6546,"mtime":1608926430172,"results":"88","hashOfConfig":"86"},{"size":989,"mtime":1605656940526,"results":"89","hashOfConfig":"86"},{"size":3409,"mtime":1608932295626,"results":"90","hashOfConfig":"86"},{"size":362,"mtime":1602713108238,"results":"91","hashOfConfig":"86"},{"size":151,"mtime":1600459163735,"results":"92","hashOfConfig":"86"},{"size":711,"mtime":1608580300608,"results":"93","hashOfConfig":"86"},{"size":8174,"mtime":1608928292583,"results":"94","hashOfConfig":"86"},{"size":286,"mtime":1604620040112,"results":"95","hashOfConfig":"86"},{"size":435,"mtime":1607538687119,"results":"96","hashOfConfig":"86"},{"size":702,"mtime":1607982602827,"results":"97","hashOfConfig":"86"},{"size":1692,"mtime":1607982593563,"results":"98","hashOfConfig":"86"},{"size":2185,"mtime":1608667898194,"results":"99","hashOfConfig":"86"},{"size":4224,"mtime":1608760655142,"results":"100","hashOfConfig":"86"},{"size":1004,"mtime":1607975945207,"results":"101","hashOfConfig":"86"},{"size":5749,"mtime":1608932030012,"results":"102","hashOfConfig":"86"},{"size":3224,"mtime":1608672330129,"results":"103","hashOfConfig":"86"},{"size":1024,"mtime":1607974635121,"results":"104","hashOfConfig":"86"},{"size":11930,"mtime":1608685284747,"results":"105","hashOfConfig":"86"},{"size":6024,"mtime":1608485540596,"results":"106","hashOfConfig":"86"},{"size":484,"mtime":1605655883499,"results":"107","hashOfConfig":"86"},{"size":918,"mtime":1605655125377,"results":"108","hashOfConfig":"86"},{"size":1603,"mtime":1608597030190,"results":"109","hashOfConfig":"86"},{"size":1532,"mtime":1607546213436,"results":"110","hashOfConfig":"86"},{"size":543,"mtime":1606342296650,"results":"111","hashOfConfig":"86"},{"size":704,"mtime":1608154322011,"results":"112","hashOfConfig":"86"},{"size":3653,"mtime":1607394620404,"results":"113","hashOfConfig":"86"},{"size":10882,"mtime":1608756991361,"results":"114","hashOfConfig":"86"},{"size":683,"mtime":1607975962917,"results":"115","hashOfConfig":"86"},{"size":703,"mtime":1607974661270,"results":"116","hashOfConfig":"86"},{"size":1227,"mtime":1605741467596,"results":"117","hashOfConfig":"86"},{"size":11926,"mtime":1608932136500,"results":"118","hashOfConfig":"86"},{"size":2719,"mtime":1608669501681,"results":"119","hashOfConfig":"86"},{"size":2166,"mtime":1608758528422,"results":"120","hashOfConfig":"86"},{"size":7525,"mtime":1608593442732,"results":"121","hashOfConfig":"86"},{"size":1606,"mtime":1607982647063,"results":"122","hashOfConfig":"86"},{"size":945,"mtime":1605039100643,"results":"123","hashOfConfig":"86"},{"size":647,"mtime":1605038989880,"results":"124","hashOfConfig":"86"},{"size":2049,"mtime":1605039002348,"results":"125","hashOfConfig":"86"},{"size":749,"mtime":1605129487238,"results":"126","hashOfConfig":"86"},{"size":653,"mtime":1605039085337,"results":"127","hashOfConfig":"86"},{"size":1065,"mtime":1606145799127,"results":"128","hashOfConfig":"86"},{"size":861,"mtime":1607377736328,"results":"129","hashOfConfig":"86"},{"size":1408,"mtime":1608679111883,"results":"130","hashOfConfig":"86"},{"size":2643,"mtime":1604447652293,"results":"131","hashOfConfig":"86"},{"size":621,"mtime":1604359065564,"results":"132","hashOfConfig":"86"},{"size":487,"mtime":1604961290575,"results":"133","hashOfConfig":"86"},{"size":927,"mtime":1604602478732,"results":"134","hashOfConfig":"86"},{"size":970,"mtime":1604791028101,"results":"135","hashOfConfig":"86"},{"size":842,"mtime":1607210326566,"results":"136","hashOfConfig":"86"},{"size":1512,"mtime":1607982633505,"results":"137","hashOfConfig":"86"},{"size":591,"mtime":1604961504011,"results":"138","hashOfConfig":"86"},{"size":10520,"mtime":1608666004722,"results":"139","hashOfConfig":"86"},{"size":3721,"mtime":1607988981088,"results":"140","hashOfConfig":"86"},{"size":841,"mtime":1604444015136,"results":"141","hashOfConfig":"86"},{"size":1391,"mtime":1604964644074,"results":"142","hashOfConfig":"86"},{"size":10458,"mtime":1608485661022,"results":"143","hashOfConfig":"86"},{"size":8027,"mtime":1608597050921,"results":"144","hashOfConfig":"86"},{"size":1329,"mtime":1607632901804,"results":"145","hashOfConfig":"86"},{"size":1731,"mtime":1607632938383,"results":"146","hashOfConfig":"86"},{"size":3042,"mtime":1608597061110,"results":"147","hashOfConfig":"86"},{"size":2995,"mtime":1608664372436,"results":"148","hashOfConfig":"86"},{"size":801,"mtime":1608062099578,"results":"149","hashOfConfig":"86"},{"size":974,"mtime":1607729662680,"results":"150","hashOfConfig":"86"},{"size":435,"mtime":1607973166953,"results":"151","hashOfConfig":"86"},{"size":415,"mtime":1608247599012,"results":"152","hashOfConfig":"86"},{"size":619,"mtime":1607977374329,"results":"153","hashOfConfig":"86"},{"size":1020,"mtime":1608931925160,"results":"154","hashOfConfig":"86"},{"size":1106,"mtime":1608928715384,"results":"155","hashOfConfig":"86"},{"size":702,"mtime":1607981661886,"results":"156","hashOfConfig":"86"},{"size":506,"mtime":1607983579661,"results":"157","hashOfConfig":"86"},{"size":533,"mtime":1607986526737,"results":"158","hashOfConfig":"86"},{"size":563,"mtime":1607987004287,"results":"159","hashOfConfig":"86"},{"size":523,"mtime":1608158034291,"results":"160","hashOfConfig":"86"},{"size":2251,"mtime":1608590682367,"results":"161","hashOfConfig":"86"},{"size":525,"mtime":1608584578497,"results":"162","hashOfConfig":"86"},{"size":2987,"mtime":1608673997335,"results":"163","hashOfConfig":"86"},{"size":1261,"mtime":1608672425457,"results":"164","hashOfConfig":"86"},{"size":498,"mtime":1608685295604,"results":"165","hashOfConfig":"86"},{"size":135,"mtime":1608760524962,"results":"166","hashOfConfig":"86"},{"size":1090,"mtime":1608933904354,"results":"167","hashOfConfig":"86"},{"size":5510,"mtime":1608932494659,"results":"168","hashOfConfig":"86"},{"size":9651,"mtime":1608932426346,"results":"169","hashOfConfig":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"173"},"hyufbp",{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"173"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"173"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"173"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"173"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"173"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"173"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"173"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"173"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"173"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"173"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"173"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"173"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"173"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"173"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"173"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"173"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"173"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"173"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"173"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"173"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"173"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"173"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"173"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"173"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lucc/development/git/reddit-clone/src/index.js",["364"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Route, Switch } from 'react-router-dom'\nimport Authorize from './components/authorize.component'\nimport GlobalState from './components/GlobalState'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <GlobalState>\n                <Route path=\"/authorize\" component={Authorize} />\n                <App />\n            </GlobalState>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n",["365","366"],"/Users/lucc/development/git/reddit-clone/src/serviceWorker.js",[],"/Users/lucc/development/git/reddit-clone/src/App.js",["367","368","369"],"import React from 'react'\nimport './App.css'\nimport { Route, Switch } from 'react-router-dom'\n\nimport MasterSearchProvider from './components/search/MasterSearchProvider'\nimport Home from './components/home.component'\nimport About from './components/about.component'\nimport Authorize from './components/authorize.component'\nimport ErrorPage from './components/errorPage.component'\nimport Navbar from './components/navigation/navbar.component'\nimport Profile from './components/profile/profile.component'\nimport PostContainer from './components/modal/PostContainer'\nimport SideBar from './components/navigation/Sidebar'\nimport Subreddit from './components/profile/Subreddit'\nimport SubscribedSubreddits from './components/profile/SubscribedSubreddits'\nimport TopNavbar from './components/navigation/TopNavbar'\nimport Login from './components/Login'\nimport CreatePostPage from './components/posting/CreatePostPage'\nimport SearchForSubreddit from './components/navigation/SearchForSubreddit'\nimport User from './components/profile/User'\nimport ProfilePostsList from './components/profile/ProfilePostsList'\n\nimport test from './components/test'\n\nimport { GlobalContext, STATUS } from './components/GlobalState'\nimport MasterSearch from './components/search/MasterSearch'\nimport HomeWrapper from './components/search/HomeWrapper'\n\nclass App extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    //     this.state = {}\n    // }\n\n    // Do this in /authorize, set state for islogged in and the auth token and then conditionally redirect IF islogged in back to home page\n\n    render() {\n        const { status } = this.context\n\n        if (status === STATUS.INAUTHENTICATED) {\n            return <Login />\n        }\n\n        if (status === STATUS.AUTHENTICATING) {\n            return 'loading...'\n        }\n\n        if (status === STATUS.AUTHENTICATED) {\n            return (\n                <div className=\"app\">\n                    <MasterSearchProvider>\n                        <TopNavbar />\n                        <div className=\"master-app-container\">\n                            <div className=\"left-side-app\">\n                                <Navbar />\n                            </div>\n                            <div className=\"main-routes\">\n                                <Switch>\n                                    {/* <HomeWrapper> */}\n                                    {/* <Route path=\"/\" exact component={Home} /> */}\n                                    <Route path=\"/\" exact>\n                                        <HomeWrapper>\n                                            <Home />\n                                        </HomeWrapper>\n                                    </Route>\n\n                                    {/* </HomeWrapper> */}\n\n                                    <Route path=\"/about\" component={About} />\n                                    <Route\n                                        path=\"/subreddits\"\n                                        component={SearchForSubreddit}\n                                    />\n                                    {/* <Route path=\"/authorize\" component={Authorize} /> */}\n                                    <Route path=\"/user\" component={User} />\n                                    <Route\n                                        path=\"/comments\"\n                                        component={Profile}\n                                    />\n                                    <Route\n                                        path=\"/posts\"\n                                        component={ProfilePostsList}\n                                    />\n                                    {/* <Route path=\"/r/:id\" exact component={Subreddit} /> */}\n                                    <Route\n                                        path=\"/create_post\"\n                                        component={CreatePostPage}\n                                    />\n                                    <Route\n                                        path=\"/r/:id\"\n                                        exact\n                                        // This will alternative componentDidUpdate to ensure that each time\n                                        // a new key is passed to the Subreddit component\n                                        // then it will update the component with the new data\n                                        render={({ match }) => {\n                                            const subreddit = match.params.id\n                                            if (!subreddit) {\n                                                return null\n                                            }\n                                            // return null\n                                            return <Subreddit key={subreddit} />\n                                        }}\n                                    />\n                                    <Route\n                                        path=\"/ErrorPage\"\n                                        exact\n                                        component={ErrorPage}\n                                    />\n                                    <Route\n                                        path=\"/\"\n                                        exact\n                                        component={ErrorPage}\n                                    />\n                                </Switch>\n                                <Route\n                                    path=\"/me/subreddits\"\n                                    component={SubscribedSubreddits}\n                                />\n                                <Route path=\"/\" component={PostContainer} />\n                            </div>\n                            <div className=\"right-side-app\">\n                                <div className=\"sidebar-nav\">\n                                    <SideBar />\n                                    {/* <div></div> */}\n                                </div>\n                            </div>\n                        </div>\n                    </MasterSearchProvider>\n                </div>\n            )\n        }\n\n        return null\n    }\n\n    // if (status)\n    // if (!this.context.hasFetched && !this.context.authenticated) {\n    //     return <Login />\n    // }\n    // } else if (!this.context.hasFetched) {\n    //     return <Login />\n    // } else if (this.context.hasFetched && this.context.authenticated)\n}\n\nApp.contextType = GlobalContext\n\nexport default App\n","/Users/lucc/development/git/reddit-clone/src/components/authorize.component.jsx",["370"],"import React from 'react'\nimport axios from 'axios'\nimport { Redirect } from 'react-router-dom'\n\nimport { GlobalContext } from './GlobalState'\nimport { generateToken } from '../queries/auth'\n\nexport default class Authorize extends React.Component {\n    state = {\n        isComplete: false,\n    }\n\n    getAccessToken = () => {\n        const paramString = window.location.search\n        const paramSearch = new URLSearchParams(paramString)\n        const code = paramSearch.get('code')\n\n        generateToken(code)\n            .then((token) => {\n                this.setState({ isComplete: true })\n                this.context.setup(token)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    componentDidMount() {\n        this.getAccessToken()\n    }\n\n    render() {\n        if (this.state.isComplete) {\n            return <Redirect to=\"/\" />\n        }\n        return <div>authorizing...</div>\n    }\n}\n\nAuthorize.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/GlobalState.jsx",["371"],"/Users/lucc/development/git/reddit-clone/src/components/about.component.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/errorPage.component.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/Login.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/home.component.jsx",["372","373","374","375","376","377","378","379","380","381","382","383"],"/Users/lucc/development/git/reddit-clone/src/components/test.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/search/HomeWrapper.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/search/MasterSearchProvider.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/search/MasterSearch.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/navigation/Sidebar.jsx",["384","385"],"import React from 'react'\n// import axios from 'axios'\n\n// import SubscribedSubreddits from '../profile/SubscribedSubreddits'\nimport { GlobalContext } from '../GlobalState'\nimport SubredditLinks from '../profile/SubredditLinks'\nimport { Link } from 'react-router-dom'\nimport SearchForSubreddit from './SearchForSubreddit'\nimport SearchSVG from '../svg-components/SearchSVG'\n\nimport getSubreddits from '../../queries/sideBar'\n\nclass SideBar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            subredditDataArr: null,\n            isLoading: true,\n        }\n    }\n\n    componentDidMount() {\n        if (this.context.accessToken) {\n            // console.log('accessToken in sidebar', this.context.accessToken)\n            getSubreddits()\n                .then((response) => {\n                    this.setState({\n                        subredditDataArr: response.data.data.children,\n                        isLoading: false,\n                    })\n                })\n                .catch((err) => {\n                    console.log('caught sidebar', err)\n                })\n        }\n    }\n\n    render() {\n        console.log('access token in sidebar', this.context.accessToken)\n        if (this.state.isLoading) {\n            return 'Loading...'\n        }\n\n        return (\n            <div className=\"subbed-reddit-links\">\n                <div className=\"menu\">Subscribed subreddits</div>\n                <ul className=\"subreddit-links\">\n                    {this.state.subredditDataArr.map((subreddit) => {\n                        return (\n                            <li className=\"list-item-subreddit\">\n                                <SubredditLinks data={subreddit.data} />\n                            </li>\n                        )\n                    })}\n                </ul>\n                <div className=\"more-subreddits\">\n                    <Link id=\"more-subreddits-link\" to=\"/me/subreddits\">\n                        See all your subreddits\n                    </Link>\n                </div>\n            </div>\n            /* </div> */\n        )\n    }\n}\n\nexport default SideBar\n\nSideBar.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/navigation/navbar.component.jsx",["386","387"],"import React from 'react'\nimport { Link, NavLink, withRouter } from 'react-router-dom'\nimport { GlobalContext } from '../GlobalState'\n\nimport Login from '../Login'\n\nconst CLIENT_ID = 'MMej7E1hI1x82A'\nconst REDIRECT_URI = 'http://localhost:3000/authorize'\nconst DURATION = 'permanent'\nconst SCOPE =\n    'identity edit flair history modconfig modflair modlog modposts modwiki mysubreddits privatemessages read report save submit subscribe vote wikiedit wikiread'\n\nconst getAuthorizationURL = () =>\n    `https://www.reddit.com/api/v1/authorize?client_id=${CLIENT_ID}&response_type=code&state=${Math.random()}&redirect_uri=${REDIRECT_URI}&duration=${DURATION}&scope=${SCOPE}`\n\nconst menuLinks = [\n    { name: 'Home', route: '' },\n    { name: 'Find Subreddit', route: 'subreddits' },\n    { name: 'My Posts', route: 'posts' },\n    { name: 'My Comments', route: 'comments' },\n    { name: 'Profile', route: 'user' },\n]\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            activeRoute: this.props.location.pathname.substring(1),\n        }\n    }\n\n    handleClick = (val) => {\n        this.setState({\n            activeRoute: val,\n        })\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"navbar\">\n                    <ul className=\"navbar-links\">\n                        <div className=\"menu\">Menu</div>\n                        {menuLinks.map((link) => (\n                            <NavLink\n                                onClick={() => this.handleClick(link.route)}\n                                to={`/${link.route}`}\n                            >\n                                <li className=\"list-item\">\n                                    <div\n                                        className={`menu-margin\n                                            ${\n                                                this.state.activeRoute ===\n                                                link.route\n                                                    ? 'activeMargin'\n                                                    : null\n                                            }`}\n                                    >\n                                        &nbsp;\n                                    </div>\n                                    <div\n                                        className={`menu-text\n                                            ${\n                                                this.state.activeRoute ===\n                                                link.route\n                                                    ? 'activeText'\n                                                    : null\n                                            }`}\n                                    >\n                                        <div className=\"link-text\">\n                                            {link.name}\n                                        </div>\n                                    </div>\n                                </li>\n                            </NavLink>\n                        ))}\n\n                        {this.context.accessToken ? null : (\n                            <li className=\"list-item\">\n                                <Login />\n                            </li>\n                        )}\n                        <div className=\"userInfo\">\n                            {this.context.userData ? (\n                                <li className=\"user\">\n                                    {this.context.userData.name}\n                                </li>\n                            ) : null}\n                            {this.context.accessToken ? (\n                                <li className=\"list-item login-btn\">\n                                    <button onClick={this.context.invalidate}>\n                                        Log out\n                                    </button>\n                                </li>\n                            ) : null}\n                        </div>\n                    </ul>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default withRouter(Navbar)\n\nNavbar.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/navigation/TopNavbar.jsx",["388"],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Login from '../Login'\nimport MasterSearch from '../search/MasterSearch'\nimport { GlobalContext } from '../GlobalState'\n\nconst TopNavbar = () => {\n    const context = React.useContext(GlobalContext)\n\n    if (!context.accessToken) {\n        return <Login />\n    } else {\n        return (\n            <div className=\"top-navbar\">\n                <div className=\"profile-picture-container\">\n                    <Link to=\"/profile\">\n                        <div className=\"profile-avatar\">\n                            <img\n                                className=\"profile-img\"\n                                src={context.userData.icon_img}\n                                alt=\"profile-avatar\"\n                            />\n                            <div>{context.userData.name}</div>\n                        </div>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TopNavbar\n","/Users/lucc/development/git/reddit-clone/src/components/profile/profile.component.jsx",["389"],"/Users/lucc/development/git/reddit-clone/src/components/profile/SubscribedSubreddits.jsx",["390"],"import React from 'react'\n\nimport axios from 'axios'\nimport { GlobalContext } from '../GlobalState'\nimport SubredditList from './SubredditList'\n\nimport getSubreddits from '../../queries/subscribedSubreddits'\n\nclass SubscribedSubreddits extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            subredditDataArr: null,\n            before: null,\n            after: null,\n            page: 1,\n        }\n    }\n\n    componentDidMount() {\n        getSubreddits()\n            .then((response) => {\n                this.handleResponse(response)\n            })\n            .catch((err) => console.log('err in subscribed subreddits', err))\n    }\n\n    handleResponse = (response) => {\n        this.setState({\n            subredditDataArr: response.data.data.children,\n            before: response.data.data.before,\n            after: response.data.data.after,\n        })\n    }\n\n    getPage = (pageDir) => {\n        if (pageDir === 'next') {\n            this.setState(\n                {\n                    page: this.state.page + 1,\n                },\n                () =>\n                    getSubreddits(pageDir, this.state.after).then(\n                        (response) => {\n                            this.handleResponse(response)\n                        }\n                    )\n            )\n        } else if (pageDir === 'prev') {\n            this.setState(\n                {\n                    page: this.state.page - 1,\n                },\n                () =>\n                    getSubreddits(pageDir, this.state.before).then(\n                        (response) => {\n                            this.handleResponse(response)\n                        }\n                    )\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"subreddit-page-container\">\n                <div className=\"subreddit-page-title\">\n                    Subscribed Subreddits\n                </div>\n                {this.state.subredditDataArr &&\n                    this.state.subredditDataArr.map((subredditData) => {\n                        // return <SubredditList data={subredditData} />\n                        return <SubredditList data={subredditData.data} />\n                    })}\n                <div className=\"pagination-container\">\n                    {this.state.before && this.state.page > 1 && (\n                        <div\n                            onClick={() => {\n                                this.getPage('prev')\n                            }}\n                            className=\"pagination\"\n                        >\n                            Prev Page\n                        </div>\n                    )}\n                    {this.state.after && (\n                        <div\n                            onClick={() => {\n                                this.getPage('next')\n                            }}\n                            className=\"pagination\"\n                        >\n                            Next Page\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SubscribedSubreddits\n\nSubscribedSubreddits.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/modal/PostContainer.jsx",["391","392","393"],"import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport Modal from './Modal'\nimport PostModal from './PostModal'\n\nclass PostContainer extends React.Component {\n    constructor() {\n        super()\n        this.state = {}\n    }\n    closeModal = () => {\n        const postIdParam = this.props.location.search\n        const postPathName = this.props.location.pathname\n        this.props.history.push(`${postPathName}`)\n    }\n\n    render() {\n        const { location, history, match } = this.props\n\n        const urlParams = new URLSearchParams(location.search || '')\n        const postId = urlParams.get('post_id')\n\n        if (!postId) {\n            return null\n        }\n\n        return (\n            <div>\n                <p>This is the PostContainer component</p>\n                <Modal closeModal={this.closeModal}>\n                    <PostModal postId={postId} closeModal={this.closeModal} />\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(PostContainer)\n","/Users/lucc/development/git/reddit-clone/src/components/profile/Subreddit.jsx",["394","395","396","397","398","399","400","401","402"],"import React from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { debounce } from 'lodash'\n\nimport marked from 'marked'\nimport DOMPurify from 'dompurify'\n\nimport CreatePost from '../posting/CreatePost'\nimport Post from '../post.component'\nimport SearchSubreddit from '../search/SearchSubreddit'\n\nimport Users from '../svg-components/Users'\nimport BestSVG from '../svg-components/BestSVG'\nimport HotSVG from '../svg-components/HotSVG'\nimport NewSVG from '../svg-components/NewSVG'\nimport TopSVG from '../svg-components/TopSVG'\nimport RisingSVG from '../svg-components/RisingSVG'\n\nimport { GlobalContext } from '../GlobalState'\nimport {\n    searchSubreddit,\n    getSubredditDetails,\n    getSubredditPosts,\n    currentSubreddit,\n} from '../../queries/subredditSearch'\nimport subscribe from '../../queries/subscribe'\n\nconst sortOptions = [\n    { name: 'Best', value: 'best', icon: <BestSVG /> },\n    { name: 'Hot', value: 'hot', icon: <HotSVG /> },\n    { name: 'New', value: 'new', icon: <NewSVG /> },\n    { name: 'Top', value: 'top', icon: <TopSVG /> },\n    { name: 'Rising', value: 'rising', icon: <RisingSVG /> },\n]\n\nclass Subreddit extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            subredditData: null,\n            isLoading: true,\n            category: 'best',\n            currentSubreddit: null,\n            before: null,\n            after: null,\n            page: 1,\n            subreddit: this.props.match.params.id,\n            query: null,\n            isSubbed: false,\n        }\n\n        this.handleSearchQuery = debounce(this.handleSearchQuery, 500)\n    }\n\n    componentDidMount() {\n        getSubredditPosts(null, this.state.subreddit, null, 'best', null).then(\n            (response) => {\n                this.handlePostsResponse(response)\n            }\n        )\n        getSubredditDetails(this.state.subreddit).then((response) => {\n            this.handleSubredditData(response)\n        })\n    }\n\n    handleClick = (val) => {\n        this.setState(\n            {\n                category: val,\n            },\n            () =>\n                getSubredditPosts(\n                    null,\n                    this.state.subreddit,\n                    null,\n                    this.state.category,\n                    null\n                ).then((response) => {\n                    this.handlePostsResponse(response)\n                })\n        )\n    }\n\n    getMarkDown = (markDown) => {\n        if (markDown) {\n            const rawMarkup = marked(markDown)\n            const clean = DOMPurify.sanitize(rawMarkup)\n            return { __html: clean }\n        } else {\n            return {\n                __html: '',\n            }\n        }\n    }\n\n    getPage = (pageDir) => {\n        const newPage =\n            pageDir === 'next' ? this.state.page + 1 : this.state.page - 1\n        const pageId = pageDir === 'next' ? this.state.after : this.state.before\n\n        console.log('getpage pressed', pageDir)\n        this.setState(\n            {\n                page: newPage,\n            },\n            () =>\n                getSubredditPosts(\n                    pageDir,\n                    this.state.subreddit,\n                    pageId,\n                    this.state.category,\n                    this.state.query\n                ).then((response) => {\n                    this.handlePostsResponse(response)\n                })\n        )\n    }\n\n    handleSearchQuery = (queryString) => {\n        if (queryString.length === 0) {\n            this.setState(\n                {\n                    query: null,\n                    page: 1,\n                },\n                () => {\n                    getSubredditPosts(\n                        null,\n                        this.state.subreddit,\n                        null,\n                        this.state.category,\n                        this.state.query\n                    ).then((response) => {\n                        this.handlePostsResponse(response)\n                    })\n                }\n            )\n        } else {\n            this.setState(\n                {\n                    query: queryString,\n                    page: 1,\n                },\n                () => {\n                    getSubredditPosts(\n                        null,\n                        this.state.subreddit,\n                        null,\n                        this.state.category,\n                        this.state.query\n                    )\n                        .then((response) => {\n                            this.handlePostsResponse(response)\n                        })\n                        .catch((err) => {\n                            console.log('this is the err', err)\n                        })\n                }\n            )\n        }\n    }\n\n    handleSubredditData = (response) => {\n        if (response) {\n            this.setState({\n                currentSubreddit: response.data.data,\n                isSubbed: response.data.data.user_is_subscriber,\n            })\n        }\n    }\n\n    handlePostsResponse = (response) => {\n        if (response) {\n            this.setState({\n                subredditData: response.data.data.children,\n                isLoading: false,\n                before: response.data.data.before,\n                after: response.data.data.after,\n            })\n        }\n    }\n\n    handleSub = (action) => {\n        subscribe(this.state.currentSubreddit.name, action).then(() => {\n            this.setState({\n                isSubbed: !this.state.isSubbed,\n            })\n        })\n    }\n\n    render() {\n        console.log('this.state.currentSubreddit', this.state.currentSubreddit)\n\n        if (!this.context.accessToken) {\n            return null\n        }\n        const {\n            banner_background_image,\n            title,\n            community_icon,\n            banner_background_color,\n            banner_img,\n            header_img,\n            icon_img,\n            display_name_prefixed,\n            public_description,\n            active_user_count,\n            user_is_subscriber,\n        } = this.state.currentSubreddit || {}\n\n        return (\n            <div>\n                <div className=\"subreddit-header-banner\">\n                    <img\n                        className=\"subreddit-header-img\"\n                        src={\n                            banner_background_image\n                                ? banner_background_image.split('?width')[0]\n                                : banner_img\n                        }\n                    />\n                </div>\n                <div className=\"subreddit-banner-header\">\n                    <div className=\"subreddit-display-container\">\n                        <img\n                            className=\"display-image\"\n                            src={\n                                community_icon\n                                    ? community_icon.split('?width')[0]\n                                    : icon_img ||\n                                      `https://styles.redditmedia.com/t5_vm1db/styles/communityIcon_5nthugyr0ef21.png?width=256&s=3a163f7135b93df0dab0921dba35f760baea5945`\n                            }\n                        />\n                    </div>\n                    <div className=\"subreddit-title-homepage\">\n                        {display_name_prefixed}\n                    </div>\n\n                    <div\n                        className=\"subreddit-page-description\"\n                        dangerouslySetInnerHTML={this.getMarkDown(\n                            public_description\n                        )}\n                    ></div>\n                    <div\n                        className=\"active-users-container\"\n                        title=\"Active Users\"\n                    >\n                        <Users />\n                        <div className=\"active-users\">{active_user_count}</div>\n                        {/* <button className=\"sub-button\">Subscribe</button> */}\n                    </div>\n                </div>\n                {/* <div className=\"sub-btn-container\">\n                    <div className=\"sub-btn-wrapper\">\n                        <button className=\"sub-button\">Subscribe</button>\n                    </div>\n                </div> */}\n                <div className=\"sort-container\">\n                    <div className=\"sortByMenuContainer\">\n                        <div className=\"sort-by-text\"></div>\n                        {sortOptions.map((option) => (\n                            <div\n                                onClick={() => this.handleClick(option.value)}\n                                className={`menu-svg-container ${\n                                    this.state.category === option.value\n                                        ? 'active'\n                                        : ''\n                                }`}\n                            >\n                                {option.icon}\n                                <div className=\"sort-by-text\">\n                                    {option.name}\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                <div className=\"create-post-master\">\n                    <div className=\"create-post-container\">\n                        <div className=\"media-post-container\">\n                            {this.state.isSubbed ? (\n                                <button\n                                    className=\"sub-button\"\n                                    onClick={() => this.handleSub('unsub')}\n                                >\n                                    Unsubscribe\n                                </button>\n                            ) : (\n                                <button\n                                    className=\"sub-button\"\n                                    onClick={() => this.handleSub('sub')}\n                                >\n                                    Subscribe\n                                </button>\n                            )}\n                            <SearchSubreddit\n                                subreddit={this.props.subreddit}\n                                handleSearchQuery={this.handleSearchQuery}\n                            />\n                            <CreatePost />\n                        </div>\n                    </div>\n                </div>\n\n                {this.state.subredditData &&\n                    this.state.subredditData.map((postData) => {\n                        return (\n                            <Post\n                                onClick={this.openModal}\n                                postData={postData}\n                                accessToken={this.context.accessToken}\n                                key={postData.data.id}\n                            />\n                        )\n                    })}\n                <div className=\"pagination-container\">\n                    {this.state.before && this.state.page > 1 && (\n                        <div\n                            onClick={() => {\n                                this.getPage('prev')\n                            }}\n                            className=\"pagination\"\n                        >\n                            Prev Page\n                        </div>\n                    )}\n                    {this.state.after && (\n                        <div\n                            onClick={() => {\n                                this.getPage('next')\n                            }}\n                            className=\"pagination\"\n                        >\n                            Next Page\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Subreddit)\n\nSubreddit.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/posting/CreatePostPage.jsx",["403"],"import React from 'react'\n\nimport { GlobalContext } from '../GlobalState'\nimport SubredditSearch from '../search/SubredditSearch'\n\nimport Axios from 'axios'\n\nimport submitPost from '../../queries/createPostPage'\n\nexport default class CreatePostPage extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            title: null,\n            subreddit: null,\n            type: 'self',\n            text: null,\n            showSuggestions: false,\n        }\n    }\n\n    handleChange = (e) => {\n        if (e.target.name === 'subreddit') {\n            this.setState({\n                [e.target.name]: e.target.value,\n                showSuggestions: true,\n            })\n        } else {\n            this.setState({\n                [e.target.name]: e.target.value,\n            })\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        if (\n            this.state.subreddit !== null &&\n            this.state.title !== null &&\n            this.state.title.length > 0 &&\n            this.state.subreddit.length > 0\n        ) {\n            submitPost(\n                this.state.title,\n                this.state.subreddit,\n                this.state.type,\n                this.state.text\n            )\n                .then((response) => {\n                    this.setState({\n                        title: '',\n                        subreddit: '',\n                        text: '',\n                        showSuggestions: false,\n                    })\n                    if (response.data.success === false) {\n                        alert(response.data.jquery[14][3])\n                    }\n                })\n                .catch((err) => console.log(err))\n        }\n    }\n\n    setSubreddit = (subreddit) => {\n        this.setState({\n            subreddit,\n            showSuggestions: false,\n        })\n    }\n\n    clickedOutside = () => {\n        this.setState({\n            showSuggestions: false,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"create-post-page-container\">\n                <form\n                    className=\"create-post-form\"\n                    type=\"submit\"\n                    onSubmit={this.handleSubmit}\n                >\n                    <div className=\"additional-post-info\">\n                        <div className=\"create-post-page-subreddit\">\n                            <input\n                                type=\"text\"\n                                name=\"subreddit\"\n                                placeholder=\"Choose a Subreddit\"\n                                value={this.state.subreddit}\n                                onChange={this.handleChange}\n                                autoComplete=\"off\"\n                                required=\"required\"\n                            />\n                            <SubredditSearch\n                                query={this.state.subreddit}\n                                token={this.context.accessToken}\n                                getSubreddit={this.getSubreddit}\n                                setSubreddit={this.setSubreddit}\n                                showSuggestions={this.state.showSuggestions}\n                                clickedOutside={this.clickedOutside}\n                            />\n                        </div>\n                        <div className=\"post-type\">\n                            <select\n                                className=\"post-select\"\n                                name=\"type\"\n                                onChange={this.handleChange}\n                            >\n                                <option\n                                    selected=\"link\"\n                                    name=\"type\"\n                                    value=\"self\"\n                                >\n                                    Text\n                                </option>\n                                <option name=\"type\" value=\"link\">\n                                    Link\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"create-post-page-title-container\">\n                        <div className=\"create-post-page-title\">\n                            <input\n                                className=\"title-input\"\n                                type=\"text\"\n                                name=\"title\"\n                                placeholder=\"Title\"\n                                value={this.state.title}\n                                onChange={this.handleChange}\n                                maxLength=\"300\"\n                                required=\"required\"\n                                autoComplete=\"off\"\n                            />\n                            {/* <label className=\"post-input-title\">Title</label> */}\n                            <span className=\"post-input-char-limit\">{`${\n                                this.state.title ? this.state.title.length : 0\n                            }/300`}</span>\n                        </div>\n                    </div>\n\n                    <div className=\"create-post-page-body\">\n                        <div className=\"text-container\">\n                            <textarea\n                                className=\"reply-text-area\"\n                                placeholder=\"Text (optional)\"\n                                name=\"text\"\n                                type=\"textarea\"\n                                wrap=\"physical\"\n                                value={this.state.text}\n                                onChange={this.handleChange}\n                            ></textarea>\n                        </div>\n                    </div>\n                    <button className=\"post-submit\" type=\"submit\">\n                        Submit\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nCreatePostPage.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/queries/auth.js",[],"/Users/lucc/development/git/reddit-clone/src/utils/login.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/axios.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/postQuery.js",[],"/Users/lucc/development/git/reddit-clone/src/utils/pagination.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/feed.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/subredditSearch.js",[],"/Users/lucc/development/git/reddit-clone/src/components/post.component.jsx",["404","405","406","407","408","409","410","411"],"import React from 'react'\nimport { Link, Redirect } from 'react-router-dom'\n\n// import Modal from './modal/Modal'\n// import PostModal from './modal/PostModal'\nimport Login from './Login'\nimport ErrorPage from './errorPage.component'\nimport { GlobalContext } from './GlobalState'\nimport { postVote, getAuthorAvatar } from '../queries/postPage'\n\nimport Axios from 'axios'\nimport qs from 'qs'\nimport moment from 'moment'\nimport marked from 'marked'\nimport DOMPurify from 'dompurify'\n\nimport HeartSVG from './svg-components/Heart'\nimport BubbleSVG from './svg-components/Bubble'\nimport UpArrowSVG from './svg-components/UpArrow'\nimport DownArrowSVG from './svg-components/DownArrow'\nimport AuthorSVG from './svg-components/Author'\n\nclass Post extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            moreInfo: false,\n            showModal: false,\n            voteVal: 0,\n            updatedScore: '',\n            isLoading: true,\n            authorImg: '',\n            // err: null,\n        }\n    }\n\n    componentDidMount() {\n        getAuthorAvatar(this.props.postData.data.author).then((response) => {\n            console.log('response in post', response.data.data.icon_img)\n            if (response.data.data.icon_img) {\n                const dataImg = response.data.data.icon_img\n                const modifiedImg = dataImg.split('?width')[0]\n                this.setState({\n                    authorImg: modifiedImg,\n                    isLoading: false,\n                })\n            } else {\n                this.setState({\n                    authorImg: null,\n                })\n            }\n        })\n        // .catch((err) => {\n        //     this.setState({\n        //         err,\n        //     })\n        // })\n    }\n\n    openModal = () => {\n        this.setState({\n            showModal: true,\n        })\n    }\n\n    closeModal = () => {\n        this.setState({\n            showModal: false,\n        })\n    }\n\n    getLength = (description) => {\n        const maxLength = 150\n        if (description.length > maxLength) {\n            return description.substring(0, maxLength)\n        } else {\n            return description\n        }\n    }\n\n    getLengthTitle = (description) => {\n        const maxLength = 100\n        if (description.length > maxLength) {\n            return description.substring(0, maxLength)\n        } else {\n            return description\n        }\n    }\n\n    getMarkDown = (markDown) => {\n        if (markDown) {\n            const rawMarkup = marked(markDown)\n            const clean = DOMPurify.sanitize(rawMarkup)\n            return { __html: clean }\n        } else {\n            return {\n                __html: '',\n            }\n        }\n    }\n\n    getDate = (unixValue) => {\n        const date = moment.unix(unixValue).format('MMM Do YYYY')\n        return date\n    }\n\n    handleArrowClick = (vote) => {\n        let voteValue\n\n        if (vote === 1 && this.state.voteVal === 1) {\n            voteValue = 0\n        } else if (vote === -1 && this.state.voteVal === -1) {\n            voteValue = 0\n        } else if (vote === 1) {\n            voteValue = 1\n        } else if (vote === -1) {\n            voteValue = -1\n        } else {\n            console.log('something went wrong', vote)\n        }\n\n        this.setState(\n            {\n                voteVal: voteValue,\n                updatedScore: this.props.postData.data.score + voteValue,\n            },\n\n            () => postVote(voteValue)\n        )\n    }\n\n    render() {\n        // if (this.state.err) {\n        //     return <Redirect to=\"/ErrorPage\" />\n        // }\n\n        const { subreddit } = this.props.postData.data\n\n        return (\n            <div className=\"master-container\">\n                <div\n                    className=\"profile-post-container\"\n                    onClick={this.openModal}\n                >\n                    <Link to={`/r/${subreddit}`}>\n                        <div className=\"post-listing-subreddit\">\n                            <span className=\"post-listing-span\">\n                                {subreddit}\n                            </span>\n                        </div>\n                    </Link>\n                    <div className=\"post-main-info\">\n                        <div className=\"post-score\">\n                            <div\n                                className=\"UpArrowSVG-container\"\n                                onClick={() => this.handleArrowClick(1)}\n                            >\n                                <UpArrowSVG isActive={this.state.voteVal} />\n                            </div>\n                            <div className=\"score-text\">\n                                {this.state.updatedScore\n                                    ? this.state.updatedScore\n                                    : this.props.postData.data.score}\n                            </div>\n                            <div\n                                className=\"DownArrowSVG-container\"\n                                onClick={() => this.handleArrowClick(-1)}\n                            >\n                                <DownArrowSVG isActive={this.state.voteVal} />\n                            </div>\n                        </div>\n                        <div className=\"main-text-container\">\n                            {/* <div className=\"post-listing-subreddit\">\n                                {this.props.postData.data.subreddit}\n                            </div> */}\n                            <div className=\"post-title\">\n                                <Link\n                                    id=\"modal-open\"\n                                    className=\"postLinks\"\n                                    to={{\n                                        search: `?post_id=${this.props.postData.data.name}`,\n                                    }}\n                                >\n                                    <div className=\"post-title-text\">\n                                        {this.getLengthTitle(\n                                            this.props.postData.data.title\n                                        )}\n                                    </div>\n                                </Link>\n                                {this.props.postData.data?.thumbnail && (\n                                    <div className=\"subreddit-image-container\">\n                                        {/* <div className=\"post-subreddit\">\n                                        {this.props.postData.data.subreddit}\n                                    </div> */}\n                                        {this.props.postData.data.thumbnail !==\n                                            'self' &&\n                                        this.props.postData.data.thumbnail !==\n                                            'thumbnail' &&\n                                        this.props.postData.data.thumbnail !==\n                                            'image' &&\n                                        this.props.postData.data.thumbnail !==\n                                            'nsfw' &&\n                                        this.props.postData.data.thumbnail !==\n                                            'default' ? (\n                                            <a\n                                                href={\n                                                    this.props.postData.data.url\n                                                }\n                                            >\n                                                <div className=\"post-listing-thumbnail-container\">\n                                                    <img\n                                                        className=\"post-thumbnail\"\n                                                        src={\n                                                            this.props.postData\n                                                                .data.thumbnail\n                                                        }\n                                                        // src={this.state.data.thumbnail}\n                                                        alt={\n                                                            this.props.postData\n                                                                .data.thumbnail\n                                                        }\n                                                    />\n                                                </div>\n                                            </a>\n                                        ) : null}\n                                    </div>\n                                )}\n                            </div>\n\n                            <div className=\"post-description\">\n                                <div\n                                    className=\"post-description-text\"\n                                    dangerouslySetInnerHTML={this.getMarkDown(\n                                        this.getLength(\n                                            this.props.postData.data.selftext\n                                        )\n                                    )}\n                                ></div>\n                            </div>\n                            <div className=\"hr-container\">\n                                <hr className=\"post-hr\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"post-sub-info\">\n                        <div className=\"post-author\">\n                            <div className=\"author-img-container\">\n                                {this.state.authorImg && (\n                                    <img\n                                        className=\"author-img\"\n                                        src={this.state.authorImg}\n                                    />\n                                )}\n                            </div>\n                            Posted by:\n                            <div className=\"author-text\">\n                                &nbsp; {this.props.postData.data.author}\n                            </div>\n                        </div>\n                        <div className=\"post-date\">\n                            <div>\n                                {this.getDate(this.props.postData.data.created)}\n                            </div>\n                        </div>\n                        <div className=\"post-comment-number\">\n                            <BubbleSVG />\n                            &nbsp;\n                            <div>{this.props.postData.data.num_comments}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nPost.contextType = GlobalContext\n\nexport default Post\n","/Users/lucc/development/git/reddit-clone/src/components/posting/CreatePost.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/modal/Modal.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/profile/SubredditLinks.jsx",["412","413","414"],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass SubredditLinks extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        const { icon_img, display_name } = this.props.data\n        console.log('icon_img', icon_img)\n\n        return (\n            <div className=\"subreddit-container\">\n                <Link className=\"subreddit-LinkTo\" to={`/r/${display_name}`}>\n                    <div className=\"subreddit-display-name\">{display_name}</div>\n                    <div className=\"subreddit-img-container\">\n                        {icon_img ? (\n                            <img className=\"subreddit-img\" src={icon_img} />\n                        ) : (\n                            <img\n                                className=\"subreddit-img\"\n                                src={\n                                    'https://styles.redditmedia.com/t5_vm1db/styles/communityIcon_5nthugyr0ef21.png?width=256&s=3a163f7135b93df0dab0921dba35f760baea5945'\n                                }\n                            />\n                        )}\n                    </div>\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default SubredditLinks\n","/Users/lucc/development/git/reddit-clone/src/components/profile/ProfileComments.jsx",["415","416","417","418","419"],"/Users/lucc/development/git/reddit-clone/src/components/search/SubredditSearch.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/profile/SubredditList.jsx",["420","421","422","423"],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass SubredditList extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        // if (!this.props.data.data) {\n        //     return null\n        // }\n        console.log('subredditList=-', this.props.data)\n        const {\n            display_name,\n            header_img,\n            public_description,\n            header_title,\n            banner_background_color,\n            banner_background_image,\n            community_icon,\n            icon_img,\n        } = this.props.data\n\n        return (\n            <Link to={`/r/${display_name}`}>\n                <div className=\"subreddit-master-container\">\n                    <div className=\"subreddit-item-container\">\n                        <div className=\"subreddit-header\">\n                            <div className=\"subreddit-img-header-container\">\n                                <img\n                                    className=\"subreddit-img-header\"\n                                    alt=\"header-img\"\n                                    src={\n                                        community_icon.split('?width')[0] ||\n                                        icon_img ||\n                                        header_img ||\n                                        `https://styles.redditmedia.com/t5_vm1db/styles/communityIcon_5nthugyr0ef21.png?width=256&s=3a163f7135b93df0dab0921dba35f760baea5945`\n                                    }\n                                />\n                            </div>\n                            <div className=\"subreddit-text-container\">\n                                <div className=\"subreddit-list-title\">\n                                    {display_name}\n                                </div>\n                                <div className=\"subreddit-description\">\n                                    {public_description}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Link>\n        )\n    }\n}\n\nexport default SubredditList\n","/Users/lucc/development/git/reddit-clone/src/components/modal/PostModal.jsx",["424"],"import React from 'react'\n// import { useLocation } from 'react-router-dom'\n\nimport Close from '../svg-components/Close'\nimport Comments from '../comments/Comments'\nimport { GlobalContext } from '../GlobalState'\nimport Video from '../Video/Video'\nimport Twitch from '../Video/Twitch'\nimport PostComment from '../comments/PostComment'\n\nimport marked from 'marked'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\n\nimport getPostById from '../../queries/postModal'\n\nclass PostModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            commentsLoaded: false,\n            data: '',\n            userParentCommentData: null,\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.postId) {\n            getPostById(this.props.postId)\n                .then((response) => {\n                    this.setState({\n                        data: response.data.data.children[0].data,\n                    })\n                })\n                .catch((err) => console.log(err))\n        }\n    }\n\n    getMarkDown = () => {\n        if (this.state.data) {\n            const rawMarkup = marked(this.state.data.selftext, {\n                sanitize: true,\n            })\n            const clean = DOMPurify.sanitize(rawMarkup)\n            return { __html: clean }\n        }\n    }\n\n    getDate = (unixValue) => {\n        const date = moment.unix(unixValue).format('dddd, MMMM Do YYYY')\n        return date\n    }\n\n    getParentComment = (commentData) => {\n        this.setState({\n            userParentCommentData: commentData,\n        })\n    }\n\n    /// Incorporate an image thumbnail --> also links if clicked\n\n    render() {\n        console.log('post modal this.state.data', this.state.data)\n        console.log(\n            'userCommentParentData in postmodal',\n            this.state.userParentCommentData\n        )\n        if (!this.state.data) {\n            return null\n        }\n\n        return (\n            <div className=\"modal-post-content\">\n                <div className=\"close-container\">\n                    <div\n                        className=\"close-svg-container\"\n                        onClick={this.props.closeModal}\n                    >\n                        <Close className=\"close-modal-btn\" />\n                    </div>\n                </div>\n                <div className=\"post-details\">\n                    <div className=\"author-subreddit-container\">\n                        <div className=\"modal-post-subreddit\">\n                            {this.state.data.subreddit}\n                        </div>\n                        <div className=\"modal-post-author\">\n                            {this.state.data.author}\n                        </div>\n                    </div>\n\n                    <div className=\"modal-post-date\">\n                        {this.getDate(this.state.data.created_utc)}\n                    </div>\n                </div>\n                <div className=\"modal-post-header\">\n                    <div className=\"modal-post-title\">\n                        <div>{this.state.data.title}</div>\n                        <div className=\"post-url\">\n                            <a href={this.state.data.url}>\n                                {this.state.data.url}\n                            </a>\n                        </div>\n                    </div>\n\n                    {/* <div className=\"modal-post-date\">\n                        {this.getDate(this.state.data.created)}\n                    </div> */}\n                    {!this.state.data.preview?.enabled &&\n                    !this.state.data?.media?.oembed?.author_url &&\n                    this.state.data.thumbnail !== 'self' &&\n                    this.state.data.thumbnail !== 'image' &&\n                    this.state.data.thumbnail !== 'thumbnail' &&\n                    this.state.data.thumbnail !== 'nsfw' &&\n                    this.state.data.thumbnail !== 'default' ? (\n                        <div className=\"post-thumbnail-container\">\n                            <a href={this.state.data.url}>\n                                <img\n                                    className=\"post-thumbnail\"\n                                    src={this.state.data.thumbnail}\n                                    // src={this.state.data.thumbnail}\n                                    alt=\"thumbnail\"\n                                />\n                            </a>\n                        </div>\n                    ) : null}\n                </div>\n                {this.state.data.preview?.enabled &&\n                this.state.data?.preview?.images ? (\n                    <div className=\"full-post-image\">\n                        <a href={this.state.data.url}>\n                            <img\n                                className=\"full-post-img\"\n                                src={this.state.data.url}\n                                style={\n                                    {\n                                        // width: `${this.state.data.preview.images[0].resolutions[2].width}px`,\n                                        // height: `${this.state.data.preview.images[0].resolutions[2].height}px`,\n                                    }\n                                }\n                            />\n                        </a>\n                    </div>\n                ) : null}\n                {this.state.data?.media?.type !== 'twitter.com' &&\n                    this.state.data?.media?.oembed?.author_url && (\n                        <Video\n                            video={this.state.data?.media?.oembed?.author_url}\n                        />\n                    )}\n                {this.state.data?.secure_media_embed?.media_domain_url && (\n                    <Twitch\n                        url={\n                            this.state.data?.secure_media_embed\n                                ?.media_domain_url\n                        }\n                    />\n                )}\n                {/* {this.state.data?.media?.reddit_video && (\n                    <Video\n                        video={\n                            this.state.data?.media?.reddit_video?.fallback_url\n                        }\n                        height={\n                            this.state.data?.preview?.images[0].resolutions[1]\n                                ?.height\n                        }\n                        width={\n                            this.state.data?.preview?.images[0].resolutions[1]\n                                ?.width\n                        }\n                    />\n                )} */}\n                <div\n                    className=\"modal-description\"\n                    dangerouslySetInnerHTML={this.getMarkDown()}\n                ></div>\n                {/* <div className=\"modal-description\">{this.props.postData.selftext}</div> */}\n                <PostComment\n                    data={this.state.data}\n                    getParentComment={this.getParentComment}\n                />\n                <Comments\n                    subreddit={this.state.data.subreddit_name_prefixed}\n                    accessToken={this.context.accessToken}\n                    postCommentsId={this.state.data.id}\n                    commentsLoaded={this.commentsLoaded}\n                    data={this.state.data}\n                    userParentCommentData={this.state.userParentCommentData}\n                />\n            </div>\n        )\n    }\n}\n\nexport default PostModal\n\nPostModal.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/search/SearchSubreddit.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/BestSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/HotSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/NewSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/RisingSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/TopSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/Users.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/SearchSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/queries/querySubreddits.js",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/Bubble.jsx",["425"],"import React from 'react'\n\nconst Bubble = () => {\n    return (\n        <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"1.5rem\"\n            height=\"1.5rem\"\n            viewBox=\"0 0 24 24\"\n        >\n            <title>chat</title>\n            <path\n                className=\"bubbleSVG\"\n                d=\"M20 1h-17c-1.654 0-3 1.346-3 3v12c0 1.654 2 2 3 2v6l9-6h8c1.654 0 3-1.346 3-3v-11c0-1.654-1.346-3-3-3zM21 15c0 0.551-0.449 1-1 1h-9l-6 5v-5h-2c-0.551 0-1-0.449-1-1v-11c0-0.551 0.449-1 1-1h17c0.551 0 1 0.449 1 1v11z\"\n            ></path>\n        </svg>\n    )\n}\n\nexport default Bubble\n\n// <svg\n//             version=\"1.1\"\n//             xmlns=\"http://www.w3.org/2000/svg\"\n//             width=\"1.5rem\"\n//             height=\"1.5rem\"\n//             viewBox=\"0 0 32 32\"\n//         >\n//             <title>bubble2</title>\n//             <path\n//                 className=\"bubbleSVG\"\n//                 d=\"M16 6c-1.717 0-3.375 0.271-4.928 0.804-1.46 0.502-2.76 1.211-3.863 2.108-2.069 1.681-3.209 3.843-3.209 6.088 0 1.259 0.35 2.481 1.039 3.63 0.711 1.185 1.781 2.268 3.093 3.133 0.949 0.625 1.587 1.623 1.755 2.747 0.056 0.375 0.091 0.753 0.105 1.129 0.233-0.194 0.461-0.401 0.684-0.624 0.755-0.755 1.774-1.172 2.828-1.172 0.168 0 0.336 0.011 0.505 0.032 0.655 0.083 1.325 0.126 1.99 0.126 1.717 0 3.375-0.271 4.928-0.804 1.46-0.502 2.76-1.211 3.863-2.108 2.069-1.681 3.209-3.843 3.209-6.088s-1.14-4.407-3.209-6.088c-1.104-0.897-2.404-1.606-3.863-2.108-1.553-0.534-3.211-0.804-4.928-0.804zM16 2v0c8.837 0 16 5.82 16 13s-7.163 13-16 13c-0.849 0-1.682-0.054-2.495-0.158-3.437 3.437-7.539 4.053-11.505 4.144v-0.841c2.142-1.049 4-2.961 4-5.145 0-0.305-0.024-0.604-0.068-0.897-3.619-2.383-5.932-6.024-5.932-10.103 0-7.18 7.163-13 16-13z\"\n//             ></path>\n//         </svg>\n\n{\n    /* <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"1.5rem\"\n            height=\"1.5rem\"\n            viewBox=\"0 0 24 24\"\n        >\n            <title>chat-3</title>\n            <path\n                className=\"bubbleSVG\"\n                d=\"M6.5 9c0.828 0 1.5 0.671 1.5 1.5s-0.672 1.5-1.5 1.5-1.5-0.671-1.5-1.5 0.672-1.5 1.5-1.5zM11.5 9c0.828 0 1.5 0.671 1.5 1.5s-0.672 1.5-1.5 1.5-1.5-0.671-1.5-1.5 0.672-1.5 1.5-1.5zM16.5 9c0.828 0 1.5 0.671 1.5 1.5s-0.672 1.5-1.5 1.5-1.5-0.671-1.5-1.5 0.672-1.5 1.5-1.5zM20 1h-17c-1.654 0-3 1.346-3 3v12c0 1.654 2 2 3 2v6l9-6h8c1.654 0 3-1.346 3-3v-11c0-1.654-1.346-3-3-3zM21 15c0 0.551-0.449 1-1 1h-9l-6 5v-5h-2c-0.551 0-1-0.449-1-1v-11c0-0.551 0.449-1 1-1h17c0.551 0 1 0.449 1 1v11z\"\n            ></path>\n        </svg> */\n}\n","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Heart.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/Author.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/DownArrow.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/UpArrow.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/PostSVG.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/search/SubredditInfo.jsx",["426","427"],"import React from 'react'\n\nclass SubredditInfo extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            subInfo: null,\n        }\n    }\n\n    render() {\n        console.log(\n            'this.props.subreddit in SubredditInfo',\n            this.props.subreddit\n        )\n\n        // if (this.props.subreddit && this.props.subreddit !== undefined) {\n        return (\n            <div className=\"subreddit-subscribers-container\">\n                <div className=\"subreddit-img-container\">\n                    {this.props.subreddit.icon_img ? (\n                        <img\n                            className=\"subreddit-img\"\n                            src={this.props.subreddit.icon_img}\n                        />\n                    ) : (\n                        <img\n                            className=\"subreddit-img\"\n                            src={\n                                'https://styles.redditmedia.com/t5_vm1db/styles/communityIcon_5nthugyr0ef21.png?width=256&s=3a163f7135b93df0dab0921dba35f760baea5945'\n                            }\n                        />\n                    )}\n                </div>\n                <div className=\"subreddit-suggestion-info-container\">\n                    <div>{this.props.subreddit.display_name}</div>\n                    <div>{this.props.subreddit.subscribers} members</div>\n                </div>\n            </div>\n        )\n        // }\n\n        // return null\n    }\n}\n\nexport default SubredditInfo\n","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Close.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/comments/Comments.jsx",["428","429","430"],"import React from 'react'\nimport axios from 'axios'\n\nimport Loader from '../svg-components/Loader'\nimport { GlobalContext } from '../GlobalState'\nimport Comment from './Comment'\nimport { flattenCommentTree } from '../../utils/comments'\nimport getComments from '../../queries/comments'\nimport { deleteComment } from '../../queries/profileComments'\n\nexport const CommentContext = React.createContext()\n\nclass Comments extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            comments: 'loading...',\n            isLoading: true,\n            parentCommentsArr: [],\n            replyComment: false,\n            userPostsArr: [],\n            userParentComment: null,\n        }\n\n        this.commentDelete = this.commentDelete.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.props.data) {\n            getComments(this.props.subreddit, this.props.postCommentsId).then(\n                (response) => {\n                    const responseData = response.data[1].data.children\n                    const parentCommentIdsArr = []\n                    responseData.forEach((parentComment) => {\n                        parentCommentIdsArr.push(parentComment.data.id)\n                    })\n\n                    // console.clear()\n                    const data = responseData\n                    console.log('direct data', data)\n                    const commentMap = flattenCommentTree(responseData)\n                    console.log('DATA AND COMMENT MAP', data, commentMap)\n\n                    // let parentData = this.props?.userParentCommentData?.data\n                    //     ?.json?.data?.things[0]?.data\n                    // let parentId = parentData?.id\n                    // let newParentArr\n                    // let found = parentCommentIdsArr.find((comment) => {\n                    //     return comment === parentId\n                    // })\n                    // if (found) {\n                    //     this.setState({\n                    //         comments: commentMap,\n                    //         parentCommentsArr: parentCommentIdsArr,\n                    //         isLoading: false,\n                    //         // userParentComment: this.props.userParentCommentData,\n                    //     })\n                    // } else if (parentData) {\n                    //     newParentArr = [parentId, ...parentCommentIdsArr]\n                    //     this.setState({\n                    //         parentCommentsArr: newParentArr,\n                    //         isLoading: false,\n                    //         comments: {\n                    //             [parentId]: parentData,\n                    //             ...commentMap,\n                    //         },\n                    //     })\n                    // } else {\n                    //     this.setState({\n                    //         comments: commentMap,\n                    //         parentCommentsArr: parentCommentIdsArr,\n                    //         isLoading: false,\n                    //         // userParentComment: this.props.userParentCommentData,\n                    //     })\n                    // }\n\n                    // let userPostData = this.props?.userParentCommentData?.data\n                    //     ?.json?.data?.things[0]?.data\n\n                    // if (userPostData) {\n                    //     this.setState({\n                    //         comments: commentMap,\n                    //         parentCommentsArr: parentCommentIdsArr,\n                    //         isLoading: false,\n                    //         userPostsArr: [\n                    //             ...this.state.userPostsArr,\n                    //             userPostData,\n                    //         ],\n                    //     })\n                    // } else {\n                    this.setState({\n                        comments: commentMap,\n                        parentCommentsArr: parentCommentIdsArr,\n                        isLoading: false,\n                        // userParentComment: this.props.userParentCommentData,\n                    })\n                    // }\n                }\n            )\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (\n            prevProps.userParentCommentData !== this.props.userParentCommentData\n        ) {\n            this.checkUserParent()\n        }\n    }\n\n    checkUserParent = () => {\n        if (this.props.userParentCommentData) {\n            let parentData = this.props?.userParentCommentData?.data?.json?.data\n                ?.things[0]?.data\n            parentData.childIds = []\n\n            console.log('parentData in comments---', parentData)\n            let parentId = parentData?.id\n\n            console.log('parentId in comments----', parentId)\n            let newParentArr\n            const found = this.state.parentCommentsArr.find((comment) => {\n                return comment === parentId\n            })\n            if (found) {\n                return\n            } else if (parentData) {\n                newParentArr = [parentId, ...this.state.parentCommentsArr]\n                // newCommentObj = { ...this.state.comments }\n                this.setState({\n                    parentCommentsArr: newParentArr,\n                    userPostsArr: [...this.state.userPostsArr, parentData],\n                    comments: {\n                        [parentId]: parentData,\n                        ...this.state.comments,\n                    },\n                })\n            }\n        }\n    }\n\n    // this works except for if it's a parent comment\n    commentDelete = (name, id, parentId) => {\n        // const id = id\n        deleteComment(name)\n            .then((response) => {\n                console.log(\n                    'you hit the deleteComment response',\n                    response,\n                    this\n                )\n\n                let newObj\n\n                // create new array of child ids without the deleted id\n                if (!parentId) {\n                    delete this.state.comments[id]\n                    newObj = { ...this.state.comments }\n                    this.setState({\n                        comments: newObj,\n                    })\n                } else {\n                    const newChildIdsArr = this.state.comments[\n                        parentId\n                    ].childIds.filter((el) => {\n                        return el !== id\n                    })\n                    const newParentArr = this.state.parentCommentsArr.filter(\n                        (el) => {\n                            return el !== id\n                        }\n                    )\n                    // set new child id array to parent (getting rid of deleted id)\n                    this.state.comments[parentId].childIds = newChildIdsArr\n                    // delete the entire id object\n                    delete this.state.comments[id]\n                    newObj = { ...this.state.comments }\n                    // const newArr = this.state.comments.id.filter(\n                    //     (el) => {\n                    //         return el !== id\n                    //     }\n                    // )\n                    console.log('newObj', newObj)\n\n                    this.setState(\n                        {\n                            comments: newObj,\n                            parentCommentsArr: newParentArr,\n                        },\n                        console.log(\n                            'you have set the new state',\n                            this.state.comments\n                        )\n                    )\n                }\n            })\n            .catch((err) => console.log(err))\n    }\n\n    getCommentReply(newCommentData, commentId) {\n        //search to see if the id is already logged in the commentMap\n        const id = newCommentData.id\n        console.log('whaat is this.state.comments', this.state)\n        // check to see if this id already exists from a previous comment made\n        if (!this.state.comments.id) {\n            // if it does not exist then add the id to the parent childIds array\n            this.state.comments[commentId].childIds = [\n                ...this.state.comments[commentId].childIds,\n                id,\n            ]\n        }\n        // add the new comment to the commentMap state OR if edit, replace old comment with new edited comment\n        this.setState({\n            comments: {\n                ...this.state.comments,\n                [newCommentData.id]: newCommentData,\n            },\n        })\n    }\n\n    getCommentEdit = (newCommentData, oldChildArr) => {\n        console.log('this.state.comments', this.state.comments)\n        console.log(\n            'this.state.parentCommentsArr',\n            this.state.parentCommentsArr\n        )\n        console.log('newCommentData', newCommentData)\n        console.log('oldChildArr', oldChildArr)\n        newCommentData.childIds = [...oldChildArr]\n        this.setState({\n            comments: {\n                ...this.state.comments,\n                [newCommentData.id]: newCommentData,\n            },\n        })\n    }\n\n    render() {\n        console.log(\n            'userParentCommentData in Comments',\n            this.props.userParentCommentData\n        )\n        console.log(\n            'userParentCommentData state in Comments',\n            this.state.userParentComment\n        )\n        console.log('this.state.comments', this.state.comments)\n        console.log(\n            'this.state.parentCommentsArr',\n            this.state.parentCommentsArr\n        )\n\n        if (this.state.isLoading) {\n            return <Loader />\n        }\n\n        console.log('parentCommentsArr', this.state.parentCommentsArr)\n\n        console.log('==userPostsArr==', this.state.userPostsArr)\n        return (\n            <div>\n                {this.state.parentCommentsArr.map((parentId) => {\n                    return (\n                        <Comment\n                            commentDelete={this.commentDelete}\n                            commentData={this.state.comments}\n                            commentId={parentId}\n                            getCommentReply={this.getCommentReply}\n                            getCommentEdit={this.getCommentEdit}\n                        />\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Comments\n\nComments.contextType = GlobalContext\n\n// Comment Id = ggn5iwg\n// Post Id = http://localhost:3000/?post_id=t3_khkikz\n","/Users/lucc/development/git/reddit-clone/src/components/Video/Video.jsx",["431"],"import React from 'react'\nimport ReactPlayer from 'react-player'\n\nimport '../../App.css'\n\nimport { Player } from 'video-react'\n\n// import Hls from 'hls'\n\nclass Video extends React.Component {\n    render() {\n        let url = this.props.video.replace('watch?v=', 'v/')\n        return (\n            <div className=\"player-container\">\n                <ReactPlayer\n                    className=\"video-player\"\n                    // url={this.props.video}\n                    url={url}\n                    // url=\"https://clips.twitch.tv/UninterestedAffluentLettuceKreygasm\"\n                    controls={true}\n                    config={{ playerVars: { showinfo: 1 } }}\n                />\n                {/* <ReactPlayer>\n                    <iframe\n                        src={this.props.video}\n                        frameborder=\"0\"\n                        allow=\"autoplay; encrypted-media\"\n                        allowfullscreen\n                        title=\"video\"\n                    />\n                    <iframe\n                        src=\"https://clips.twitch.tv/UninterestedAffluentLettuceKreygasm\"\n                        // height=\"<height>\"\n                        // width=\"<width>\"\n                        // frameborder=\"<frameborder>\"\n                        // scrolling=\"<scrolling>\"\n                        // allowfullscreen=\"<allow full screen>\"\n                    ></iframe>\n\n                    </ReactPlayer> */}\n            </div>\n        )\n    }\n}\n\nexport default Video\n\n// React Video  http://localhost:3000/r/web_design?post_id=t3_k2spjf\n\n// http://localhost:3000/r/movies?post_id=t3_k3yt6t\n\n// http://localhost:3000/r/LivestreamFail?post_id=t3_dlte8e\n\n// secure_media_embed:\n\n// \"&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fstreamable.com%2Fo%2Ffpuv4&amp;display_name=Streamable&amp;url=https%3A%2F%2Fstreamable.com%2Ffpuv4&amp;image=https%3A%2F%2Fcdn-cf-east.streamable.com%2Fimage%2Ffpuv4.jpg%3FExpires%3D1603595460%26Signature%3DHLLKKHCuxMySyMZwLmjHCOt-LBJRKDtHA19LfIPkq-YUzbwlrzbcYBo6jZJrDeWn04AYgCiaCwOGBV5aEgA3G4HnbjFeIwUB5fBr3Asjt2-akdR59SipPqZOV-9GlpQK-VuxHELLGMvpCONTaCapTgIpDYY9hsfcvFntNN7CKxViYl5cFXNh%7E9BDutv8Q5x8G1g9vn1EhVfnnC4uUQQpWPNa0cas12IrNL2hvR54ttEHRdjEADwoV%7EY1mC13B7d0%7EsNZNBV4SbNNld-ZPaYtpiwP67mceecr1%7E2COOhUUKEVQkvNlThWCa-I25SlzdzgZwqCeeYHXdmAXJ6M%7EwNeEA__%26Key-Pair-Id%3DAPKAIEYUVEN4EVB2OKEQ&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=streamable\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"Streamable embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;\"\n// content: \"&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/rYPJYxEoPCg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\"\n\n// \"&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fclips.twitch.tv%2Fembed%3Fclip%3DUninterestedAffluentLettuceKreygasm%26parent%3Dcdn.embedly.com%26parent%3Dreddit.com%26parent%3Dwww.reddit.com%26parent%3Dold.reddit.com%26parent%3Dnew.reddit.com%26parent%3Dredditmedia.com%26muted%3Dtrue%26autoplay%3Dfalse&amp;display_name=Twitch.tv&amp;url=https%3A%2F%2Fclips.twitch.tv%2FUninterestedAffluentLettuceKreygasm&amp;image=https%3A%2F%2Fclips-media-assets2.twitch.tv%2FAT-cm%7C950415022-social-preview.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=twitch\" width=\"600\" height=\"340\" scrolling=\"no\" title=\"Twitch.tv embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;\"\n","/Users/lucc/development/git/reddit-clone/src/utils/comments.js",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/Loader.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/comments/Comment.jsx",["432","433","434"],"import React from 'react'\nimport marked from 'marked'\nimport DOMPurify from 'dompurify'\nimport Axios from 'axios'\nimport qs from 'qs'\n\nimport CommentReply from './CommentReply'\nimport { GlobalContext } from '../GlobalState'\nimport moment from 'moment'\nimport getAuthorAvatar from '../../queries/profileComments'\nimport postVote from '../../queries/comment'\n\nimport DownArrow from '../svg-components/DownArrow'\nimport UpArrow from '../svg-components/UpArrow'\nimport Collapse from '../svg-components/Collapse'\nimport UnCollapse from '../svg-components/UnCollapse'\n\nimport './comment.scss'\n\n// const replyContext = React.useContext(GlobalContext)\n\nclass Comment extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isCollapsed: false,\n            voteVal: 0,\n            updatedScore: '',\n            authorImg: '',\n            err: '',\n        }\n    }\n\n    componentDidMount() {\n        getAuthorAvatar(this.props.commentData[this.props.commentId]?.author)\n            .then((response) => {\n                const dataImg = response.data.data.icon_img\n                const modifiedImg = dataImg.split('?width')[0]\n                this.setState({\n                    authorImg: modifiedImg,\n                })\n            })\n            .catch((err) => {\n                this.setState({\n                    authorImg: null,\n                    err: err,\n                })\n            })\n    }\n\n    handleArrowClick = (vote) => {\n        let voteValue\n\n        if (vote === 1 && this.state.voteVal === 1) {\n            voteValue = 0\n        } else if (vote === -1 && this.state.voteVal === -1) {\n            voteValue = 0\n        } else if (vote === 1) {\n            voteValue = 1\n        } else if (vote === -1) {\n            voteValue = -1\n        } else {\n            console.log('something went wrong', vote)\n        }\n\n        this.setState(\n            {\n                voteVal: voteValue,\n                updatedScore:\n                    this.props.commentData[this.props.commentId].score +\n                    voteValue,\n            },\n            () =>\n                postVote(\n                    voteValue,\n                    this.props.commentData[this.props.commentId].name\n                )\n        )\n    }\n\n    getTime = (unixValue) => {\n        const dateMoment = moment.unix(unixValue).fromNow()\n        return dateMoment\n    }\n\n    getMarkDown = (markDown) => {\n        if (markDown) {\n            const rawMarkup = marked(markDown)\n            const clean = DOMPurify.sanitize(rawMarkup)\n            return { __html: clean }\n        } else {\n            return {\n                __html: '<p className=\"deleted-comment\">Deleted Comment<p>',\n            }\n        }\n    }\n\n    // nestedcomments = () => []\n    getComments = () => {\n        return this.props.commentData[this.props.commentId]?.childIds?.map(\n            (commentId) => {\n                return (\n                    <Comment\n                        commentData={this.props.commentData}\n                        commentId={commentId}\n                        getCommentReply={this.props.getCommentReply}\n                        getCommentEdit={this.props.getCommentEdit}\n                        commentDelete={this.props.commentDelete}\n                        // parent_Id={props.commentData[commentId].parent_id}\n                    />\n                )\n            }\n        )\n    }\n\n    collapseComments = () => {\n        this.setState({\n            isCollapsed: !this.state.isCollapsed,\n        })\n    }\n\n    //in render display null if you shouldn't display it\n    render() {\n        // console.log('get comment edit', this.props.getCommentEdit)\n        // console.log('commentId', this.props.commentId)\n        // console.log('commentData', this.props.commentData)\n        // console.log('parent_id', this.props.parent_Id)\n        return (\n            <>\n                <div className=\"comments__container\">\n                    <div className=\"comments__main\">\n                        {this.props.commentData[this.props.commentId]?.body !==\n                            undefined && (\n                            <div className=\"comments__upvotes-container\">\n                                <div\n                                    className=\"comments__upvote-arrows\"\n                                    onClick={() => this.handleArrowClick(1)}\n                                >\n                                    <UpArrow isActive={this.state.voteVal} />\n                                </div>\n                                <div className=\"comments__comment-score\">\n                                    {this.state.updatedScore\n                                        ? this.state.updatedScore\n                                        : this.props.commentData[\n                                              this.props.commentId\n                                          ].score}\n                                </div>\n                                <div\n                                    className=\"comments_upvote-arrows\"\n                                    onClick={() => this.handleArrowClick(-1)}\n                                >\n                                    <DownArrow isActive={this.state.voteVal} />\n                                </div>\n                            </div>\n                        )}\n\n                        <div className=\"comments__main-content\">\n                            <div className=\"comments__title-container\">\n                                <div className=\"comments__author-info-container\">\n                                    <div className=\"comments__author-img-container\">\n                                        {this.state.authorImg && (\n                                            <img\n                                                className=\"comments__author-img\"\n                                                src={this.state.authorImg}\n                                            />\n                                        )}\n                                    </div>\n                                    <div className=\"comments__author\">\n                                        {\n                                            this.props.commentData[\n                                                this.props.commentId\n                                            ]?.author\n                                        }\n                                    </div>\n                                </div>\n                                {this.props.commentData[this.props.commentId]\n                                    ?.body !== undefined && (\n                                    <div className=\"comments__author-date\">\n                                        {this.getTime(\n                                            this.props.commentData[\n                                                this.props.commentId\n                                            ]?.created_utc\n                                        )}\n                                    </div>\n                                )}\n                            </div>\n                            <div className=\"comments__text-container\">\n                                <div\n                                    className=\"comments__comment\"\n                                    dangerouslySetInnerHTML={this.getMarkDown(\n                                        this.props.commentData[\n                                            this.props.commentId\n                                        ]?.body\n                                    )}\n                                ></div>\n                            </div>\n                            <div className=\"comments__reply-collapse-container\">\n                                <div className=\"comments__collapse-container\">\n                                    {this.props.commentData[\n                                        this.props.commentId\n                                    ]?.childIds?.length > 0 ? (\n                                        <div\n                                            className=\"collapse-container\"\n                                            onClick={this.collapseComments}\n                                        >\n                                            <Collapse\n                                                isCollapsed={\n                                                    this.state.isCollapsed\n                                                }\n                                            />\n\n                                            <UnCollapse\n                                                isCollapsed={\n                                                    this.state.isCollapsed\n                                                }\n                                            />\n                                        </div>\n                                    ) : null}\n                                </div>\n                                <div className=\"comments__reply-container\">\n                                    {this.props.commentData[\n                                        this.props.commentId\n                                    ]?.body !== undefined && (\n                                        <CommentReply\n                                            getCommentReply={\n                                                this.props.getCommentReply\n                                            }\n                                            commentDelete={\n                                                this.props.commentDelete\n                                            }\n                                            commentId={this.props.commentId}\n                                            // parent_Id={this.props.parent_Id}\n                                            commentData={this.props.commentData}\n                                            getCommentEdit={\n                                                this.props.getCommentEdit\n                                            }\n                                        />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {!this.state.isCollapsed && this.getComments()}\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Comment\n\nComment.contextType = GlobalContext\n","/Users/lucc/development/git/reddit-clone/src/components/comments/CommentReply.jsx",["435"],"import React from 'react'\nimport CommentReplyInput from './CommentReplyInput'\nimport CommentEditInput from './CommentEditInput'\nimport { GlobalContext } from '../GlobalState'\n\n// import InputField from './InputField';\n\nclass CommentReply extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            showTextBox: false,\n            showEditBox: false,\n            confirm: false,\n        }\n    }\n\n    handleCommentPost = () => {\n        this.setState({\n            showTextBox: !this.state.showTextBox,\n        })\n    }\n\n    handleEditPost = () => {\n        this.setState({\n            showEditBox: !this.state.showEditBox,\n        })\n    }\n\n    closeEditPost = () => {\n        this.setState({\n            showEditBox: false,\n        })\n    }\n\n    deleteBtn = () => {\n        this.setState({\n            confirm: !this.state.confirm,\n        })\n    }\n\n    deleted = () => {\n        let newParentId\n        const comment = this.props.commentData[this.props.commentId]\n        if (comment.parent_id.substring(0, 2) === 't3') {\n            newParentId = null\n        } else {\n            newParentId = comment.parent_id.substring(3)\n        }\n        this.props.commentDelete(\n            comment.name,\n            comment.id,\n            newParentId\n            // this.props.commentData[\n            //     this.props.commentId\n            // ].parent_id.substring(3)\n        )\n        this.setState({\n            confirm: false,\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"commentReplyEdit-container\">\n                <div className=\"replyEdit-btn-container\">\n                    <div className=\"replyEdit-duo-btn\">\n                        {this.state.showEditBox ? null : (\n                            <div\n                                className=\"comment-reply\"\n                                onClick={this.handleCommentPost}\n                            >\n                                Reply\n                            </div>\n                        )}\n                        {this.props.commentData[this.props.commentId].author ===\n                            this.context.userData.name &&\n                            !this.state.showTextBox && (\n                                <button\n                                    className=\"comment-submit\"\n                                    onClick={this.handleEditPost}\n                                >\n                                    Edit\n                                </button>\n                            )}\n                    </div>\n                    {this.props.commentData[this.props.commentId].author ===\n                        this.context.userData.name &&\n                        !this.state.confirm && (\n                            <button\n                                className=\"delete-btn\"\n                                onClick={this.deleteBtn}\n                            >\n                                Delete\n                            </button>\n                        )}\n                    {/* {this.props.commentData[this.props.commentId].author ===\n                        this.context.userData.name &&\n                        this.state.confirm && (\n                            <div className=\"confirm-div\">\n                                <div className=\"confirm-text\">\n                                    <p>\n                                        Are you sure you want to delete this\n                                        comment?\n                                    </p>\n                                </div>\n                                <div className=\"confirm-btns\">\n                                    <button\n                                        className=\"yes-btn\"\n                                        // onClick={this.deleted}\n                                    >\n                                        Yes\n                                    </button>\n                                    <button\n                                        className=\"no-btn\"\n                                        // onClick={this.deleteBtn}\n                                    >\n                                        No\n                                    </button>\n                                </div>\n                            </div>\n                        )} */}\n                </div>\n                {this.props.commentData[this.props.commentId].author ===\n                    this.context.userData.name &&\n                    this.state.confirm && (\n                        <div className=\"confirm-div\">\n                            <div className=\"confirm-text\">\n                                <p>\n                                    Are you sure you want to delete this\n                                    comment?\n                                </p>\n                            </div>\n                            <div className=\"confirm-btns\">\n                                <button\n                                    className=\"yes-btn\"\n                                    onClick={this.deleted}\n                                >\n                                    Yes\n                                </button>\n                                <button\n                                    className=\"no-btn\"\n                                    onClick={this.deleteBtn}\n                                >\n                                    No\n                                </button>\n                            </div>\n                        </div>\n                    )}\n                {this.state.showEditBox ? null : (\n                    <CommentReplyInput\n                        getCommentReply={this.props.getCommentReply}\n                        showTextBox={this.state.showTextBox}\n                        commentId={this.props.commentId}\n                        parent_Id={this.props.parent_Id}\n                        commentData={this.props.commentData}\n                        handleCommentPost={this.handleCommentPost}\n                        showTextBox={this.state.showTextBox}\n                    />\n                )}\n                {this.state.showTextBox ? null : (\n                    <CommentEditInput\n                        getCommentReply={this.props.getCommentReply}\n                        commentData={this.props.commentData}\n                        commentId={this.props.commentId}\n                        accessToken={this.context.accessToken}\n                        user={this.context.userData.name}\n                        handleEditPost={this.handleEditPost}\n                        showEditBox={this.state.showEditBox}\n                        closeEditPost={this.closeEditPost}\n                        getCommentEdit={this.props.getCommentEdit}\n                        oldChildArr={\n                            this.props.commentData[this.props.commentId]\n                                .childIds\n                        }\n                        author={\n                            this.props.commentData[this.props.commentId].author\n                        }\n                    />\n                )}\n            </div>\n        )\n    }\n}\n\nexport default CommentReply\n\nCommentReply.contextType = GlobalContext\n\n// {\n//     !this.state.confirm ? (\n//         <div className=\"delete-div\">\n//             <button className=\"delete-btn\" onClick={this.deleteBtn}>\n//                 Delete Comment\n//             </button>\n//         </div>\n//     ) : (\n//         <div className=\"confirm-div\">\n//             <div className=\"confirm-text\">\n//                 <p>Are you sure you want to delete this comment?</p>\n//             </div>\n//             <div className=\"confirm-btns\">\n//                 <button className=\"yes-btn\" onClick={this.deleted}>\n//                     Yes\n//                 </button>\n//                 <button className=\"no-btn\" onClick={this.deleteBtn}>\n//                     No\n//                 </button>\n//             </div>\n//         </div>\n//     )\n// }\n","/Users/lucc/development/git/reddit-clone/src/components/svg-components/Collapse.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/svg-components/UnCollapse.jsx",["436","437"],"import React from 'react'\n\nconst Uncollapse = (props) => {\n    if (props.isCollapsed) {\n        return (\n            <div className=\"uncollapseSVG\">\n                <svg\n                    version=\"1.1\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"20\"\n                    height=\"20\"\n                    viewBox=\"0 0 20 20\"\n                >\n                    <title>circle-with-plus</title>\n                    <path d=\"M10 1.6c-4.639 0-8.4 3.761-8.4 8.4s3.761 8.4 8.4 8.4 8.4-3.761 8.4-8.4c0-4.639-3.761-8.4-8.4-8.4zM15 11h-4v4h-2v-4h-4v-2h4v-4h2v4h4v2z\"></path>\n                </svg>\n            </div>\n        )\n    } else {\n        return <div></div>\n    }\n}\n\nexport default Uncollapse\n\n{\n    /* <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n<title>chevron-with-circle-right</title>\n<path d=\"M11 10l-2.302-2.506c-0.196-0.198-0.196-0.519 0-0.718 0.196-0.197 0.515-0.197 0.71 0l2.807 2.864c0.196 0.199 0.196 0.52 0 0.717l-2.807 2.864c-0.195 0.199-0.514 0.198-0.71 0-0.196-0.197-0.196-0.518 0-0.717l2.302-2.504zM10 0.4c5.302 0 9.6 4.298 9.6 9.6 0 5.303-4.298 9.6-9.6 9.6s-9.6-4.297-9.6-9.6c0-5.302 4.298-9.6 9.6-9.6zM10 18.354c4.613 0 8.354-3.74 8.354-8.354s-3.741-8.354-8.354-8.354c-4.615 0-8.354 3.74-8.354 8.354s3.739 8.354 8.354 8.354z\"></path>\n</svg> */\n}\n\n{\n    /* <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\">\n<title>chevron-small-right</title>\n<path d=\"M11 10l-3.141-3.42c-0.268-0.27-0.268-0.707 0-0.978 0.268-0.27 0.701-0.27 0.969 0l3.83 3.908c0.268 0.271 0.268 0.709 0 0.979l-3.83 3.908c-0.267 0.272-0.701 0.27-0.969 0s-0.268-0.707 0-0.978l3.141-3.419z\"></path>\n</svg> */\n}\n","/Users/lucc/development/git/reddit-clone/src/components/comments/CommentReplyInput.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/comments/CommentEditInput.jsx",["438","439"],"import React from 'react'\nimport qs from 'qs'\nimport Axios from 'axios'\n\nimport editComment from '../../queries/commentEditInput'\n\nclass CommentEditInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: '',\n            editBox: false,\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            value: e.target.value,\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n\n        if (this.state.value) {\n            console.log(\n                'submitting',\n                this.props,\n                this.state.value,\n                this.props.commentId\n            )\n            this.setState({ value: this.state.value }, () => {\n                editComment(\n                    this.props.commentData[this.props.commentId].name,\n                    this.state.value\n                )\n                    .then((response) => {\n                        if (response.data.json.errors[0] !== undefined) {\n                            response.data.json.errors[0].map((err) => {\n                                return alert(err)\n                            })\n                        } else {\n                            this.props.getCommentEdit(\n                                response.data.json.data.things[0].data,\n                                this.props.oldChildArr\n                            )\n                        }\n                    })\n                    .catch((err) => console.log(err))\n            })\n        } else {\n            alert('Please type something')\n        }\n        this.props.closeEditPost()\n    }\n    render() {\n        return (\n            <div className=\"edit-input-container\">\n                {this.props.showEditBox ? (\n                    <form className=\"comment-form\" onSubmit={this.handleSubmit}>\n                        <textarea\n                            placeholder={\n                                this.props.commentData[this.props.commentId]\n                                    .body\n                            }\n                            type=\"textarea\"\n                            wrap=\"physical\"\n                            value={this.state.textInput}\n                            onChange={this.handleChange}\n                        ></textarea>\n                        <div className=\"comment-buttons\">\n                            <button\n                                className=\"cancel-comment\"\n                                onClick={this.props.handleEditPost}\n                                type=\"button\"\n                            >\n                                Cancel\n                            </button>\n                            <button className=\"comment-submit\" type=\"submit\">\n                                Submit\n                            </button>\n                        </div>\n                    </form>\n                ) : null}\n            </div>\n        )\n    }\n}\n\nexport default CommentEditInput\n","/Users/lucc/development/git/reddit-clone/src/queries/postPage.js",[],"/Users/lucc/development/git/reddit-clone/src/components/Video/Twitch.jsx",["440","441","442"],"import React from 'react'\nimport { Player } from 'video-react'\nimport ReactPlayer from 'react-player'\n\nexport default class Twitch extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n    render() {\n        console.log('vod', this.props.url)\n        return (\n            // <ReactPlayer url=\"https://clips.twitch.tv/BrainyHyperSrirachaBleedPurple\" />\n            // <iframe\n            //     width=\"560\"\n            //     height=\"315\"\n            //     src=\"https://player.twitch.tv/BrainyHyperSrirachaBleedPurple\"\n            //     frameborder=\"0\"\n            //     allow=\"autoplay; encrypted-media\"\n            //     allowfullscreen\n            // ></iframe>\n            <iframe\n                src=\"https://www.redditmedia.com/mediaembed/k11bsu&parent=localhost\"\n                height=\"1200px\"\n                width=\"720px\"\n            ></iframe>\n        )\n    }\n}\n\n// https://www.redditmedia.com/mediaembed/k11bsu\n","/Users/lucc/development/git/reddit-clone/src/queries/postModal.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/sideBar.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/createPostPage.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/profile.js",["443"],"/Users/lucc/development/git/reddit-clone/src/queries/profileComments.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/subscribedSubreddits.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/comment.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/commentEditInput.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/commentReplyInput.js",[],"/Users/lucc/development/git/reddit-clone/src/queries/comments.js",["444"],"import axiosInstance from './axios'\nimport qs from 'qs'\n\nexport default function getComments(subreddit, postCommentsId) {\n    let axios = axiosInstance()\n\n    return axios({\n        method: 'GET',\n        url: `https://oauth.reddit.com/${subreddit}/comments/${postCommentsId}`,\n    })\n        .then((response) => {\n            console.log('response in comments', response)\n            return response\n        })\n        .catch((err) => {\n            console.log('comments error: ', err)\n            return err\n        })\n}\n","/Users/lucc/development/git/reddit-clone/src/components/comments/PostComment.jsx",[],"/Users/lucc/development/git/reddit-clone/src/queries/postComment.js",[],"/Users/lucc/development/git/reddit-clone/src/components/navigation/SearchForSubreddit.jsx",["445"],"import React from 'react'\nimport { debounce } from 'lodash'\n\nimport SubredditListing from './SubredditListing'\nimport SubredditSearch from '../search/SubredditSearch'\nimport SearchSVG from '../svg-components/SearchSVG'\n\nimport { getSubreddits } from '../../queries/querySubreddits'\n\nimport './searchForSubreddit.scss'\n\nexport default class SearchForSubreddit extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            value: '',\n            subInfoArr: [],\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState(\n            {\n                value: e.target.value,\n            },\n            debounce(this.searchSubreddits, 500)\n        )\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.searchSubreddits()\n    }\n\n    // searchSubreddits = debounce(() => {\n    //     getSubreddits(this.state.value)\n    //         .then((subredditInfoArray) => {\n    //             console.log('subredditInfoArray', subredditInfoArray)\n    //             this.setState({ subInfoArr: subredditInfoArray })\n    //         })\n    //         .catch((err) => console.log(err))\n    // }, 500)\n\n    searchSubreddits = () => {\n        getSubreddits(this.state.value)\n            .then((subredditInfoArray) => {\n                console.log('subredditInfoArray', subredditInfoArray)\n                this.setState({ subInfoArr: subredditInfoArray })\n            })\n            .catch((err) => console.log(err))\n    }\n\n    render() {\n        return (\n            <div className=\"subredditSearch__component-container\">\n                <h1 className=\"subredditSearch__title\">Search for Subreddit</h1>\n                <div className=\"subredditSearch__container\">\n                    <SearchSVG />\n                    <div className=\"subredditSearch__query-container\">\n                        <form\n                            type=\"submit\"\n                            value={this.state.value}\n                            className=\"subredditSearch__form\"\n                            onSubmit={this.handleSubmit}\n                        >\n                            <input\n                                className=\"subredditSearch__search-input\"\n                                type=\"text\"\n                                name=\"query\"\n                                onChange={this.handleChange}\n                                placeholder=\"Search for a subreddit\"\n                                value={this.state.value}\n                            />\n                        </form>\n                    </div>\n                </div>\n                <SubredditListing\n                    value={this.state.value}\n                    subInfoArr={this.state.subInfoArr}\n                />\n            </div>\n        )\n    }\n}\n\n// ;<Link id=\"search-for-subreddit\" to=\"/subreddits\">\n//     <div className=\"search-for-subreddit-container\">\n//         <SearchSVG />\n//         <span>Search for specific subreddit</span>\n//     </div>\n// </Link>\n","/Users/lucc/development/git/reddit-clone/src/components/navigation/SubredditListing.jsx",[],"/Users/lucc/development/git/reddit-clone/src/queries/subscribe.js",[],"/Users/lucc/development/git/reddit-clone/src/components/profile/User.jsx",[],"/Users/lucc/development/git/reddit-clone/src/queries/profilePosts.js",[],"/Users/lucc/development/git/reddit-clone/src/components/profile/ProfilePostsList.jsx",[],"/Users/lucc/development/git/reddit-clone/src/components/profile/ProfilePost.jsx",["446","447","448","449"],{"ruleId":"450","severity":1,"message":"451","line":7,"column":17,"nodeType":"452","messageId":"453","endLine":7,"endColumn":23},{"ruleId":"454","replacedBy":"455"},{"ruleId":"456","replacedBy":"457"},{"ruleId":"450","severity":1,"message":"458","line":8,"column":8,"nodeType":"452","messageId":"453","endLine":8,"endColumn":17},{"ruleId":"450","severity":1,"message":"459","line":23,"column":8,"nodeType":"452","messageId":"453","endLine":23,"endColumn":12},{"ruleId":"450","severity":1,"message":"460","line":26,"column":8,"nodeType":"452","messageId":"453","endLine":26,"endColumn":20},{"ruleId":"450","severity":1,"message":"461","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":13},{"ruleId":"450","severity":1,"message":"461","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":13},{"ruleId":"450","severity":1,"message":"461","line":3,"column":8,"nodeType":"452","messageId":"453","endLine":3,"endColumn":13},{"ruleId":"450","severity":1,"message":"462","line":4,"column":8,"nodeType":"452","messageId":"453","endLine":4,"endColumn":16},{"ruleId":"450","severity":1,"message":"463","line":5,"column":22,"nodeType":"452","messageId":"453","endLine":5,"endColumn":26},{"ruleId":"450","severity":1,"message":"464","line":10,"column":8,"nodeType":"452","messageId":"453","endLine":10,"endColumn":13},{"ruleId":"450","severity":1,"message":"465","line":11,"column":8,"nodeType":"452","messageId":"453","endLine":11,"endColumn":13},{"ruleId":"450","severity":1,"message":"466","line":15,"column":10,"nodeType":"452","messageId":"453","endLine":15,"endColumn":21},{"ruleId":"450","severity":1,"message":"467","line":23,"column":10,"nodeType":"452","messageId":"453","endLine":23,"endColumn":23},{"ruleId":"450","severity":1,"message":"468","line":24,"column":10,"nodeType":"452","messageId":"453","endLine":24,"endColumn":17},{"ruleId":"450","severity":1,"message":"469","line":40,"column":7,"nodeType":"452","messageId":"453","endLine":40,"endColumn":26},{"ruleId":"470","severity":1,"message":"471","line":69,"column":17,"nodeType":"472","messageId":"473","endLine":69,"endColumn":74},{"ruleId":"450","severity":1,"message":"474","line":151,"column":27,"nodeType":"452","messageId":"453","endLine":151,"endColumn":34},{"ruleId":"450","severity":1,"message":"475","line":151,"column":36,"nodeType":"452","messageId":"453","endLine":151,"endColumn":41},{"ruleId":"450","severity":1,"message":"476","line":8,"column":8,"nodeType":"452","messageId":"453","endLine":8,"endColumn":26},{"ruleId":"450","severity":1,"message":"477","line":9,"column":8,"nodeType":"452","messageId":"453","endLine":9,"endColumn":17},{"ruleId":"450","severity":1,"message":"463","line":2,"column":10,"nodeType":"452","messageId":"453","endLine":2,"endColumn":14},{"ruleId":"450","severity":1,"message":"469","line":13,"column":7,"nodeType":"452","messageId":"453","endLine":13,"endColumn":26},{"ruleId":"450","severity":1,"message":"460","line":5,"column":8,"nodeType":"452","messageId":"453","endLine":5,"endColumn":20},{"ruleId":"450","severity":1,"message":"464","line":3,"column":8,"nodeType":"452","messageId":"453","endLine":3,"endColumn":13},{"ruleId":"450","severity":1,"message":"461","line":3,"column":8,"nodeType":"452","messageId":"453","endLine":3,"endColumn":13},{"ruleId":"450","severity":1,"message":"478","line":13,"column":15,"nodeType":"452","messageId":"453","endLine":13,"endColumn":26},{"ruleId":"450","severity":1,"message":"474","line":19,"column":27,"nodeType":"452","messageId":"453","endLine":19,"endColumn":34},{"ruleId":"450","severity":1,"message":"475","line":19,"column":36,"nodeType":"452","messageId":"453","endLine":19,"endColumn":41},{"ruleId":"450","severity":1,"message":"461","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":13},{"ruleId":"450","severity":1,"message":"479","line":22,"column":5,"nodeType":"452","messageId":"453","endLine":22,"endColumn":20},{"ruleId":"450","severity":1,"message":"480","line":25,"column":5,"nodeType":"452","messageId":"453","endLine":25,"endColumn":21},{"ruleId":"450","severity":1,"message":"481","line":200,"column":13,"nodeType":"452","messageId":"453","endLine":200,"endColumn":18},{"ruleId":"450","severity":1,"message":"482","line":202,"column":13,"nodeType":"452","messageId":"453","endLine":202,"endColumn":36},{"ruleId":"450","severity":1,"message":"483","line":204,"column":13,"nodeType":"452","messageId":"453","endLine":204,"endColumn":23},{"ruleId":"450","severity":1,"message":"484","line":209,"column":13,"nodeType":"452","messageId":"453","endLine":209,"endColumn":31},{"ruleId":"485","severity":1,"message":"486","line":215,"column":21,"nodeType":"487","endLine":222,"endColumn":23},{"ruleId":"485","severity":1,"message":"486","line":226,"column":25,"nodeType":"487","endLine":234,"endColumn":27},{"ruleId":"450","severity":1,"message":"488","line":6,"column":8,"nodeType":"452","messageId":"453","endLine":6,"endColumn":13},{"ruleId":"450","severity":1,"message":"489","line":2,"column":16,"nodeType":"452","messageId":"453","endLine":2,"endColumn":24},{"ruleId":"450","severity":1,"message":"464","line":6,"column":8,"nodeType":"452","messageId":"453","endLine":6,"endColumn":13},{"ruleId":"450","severity":1,"message":"490","line":7,"column":8,"nodeType":"452","messageId":"453","endLine":7,"endColumn":17},{"ruleId":"450","severity":1,"message":"488","line":11,"column":8,"nodeType":"452","messageId":"453","endLine":11,"endColumn":13},{"ruleId":"450","severity":1,"message":"491","line":12,"column":8,"nodeType":"452","messageId":"453","endLine":12,"endColumn":10},{"ruleId":"450","severity":1,"message":"492","line":17,"column":8,"nodeType":"452","messageId":"453","endLine":17,"endColumn":16},{"ruleId":"450","severity":1,"message":"493","line":21,"column":8,"nodeType":"452","messageId":"453","endLine":21,"endColumn":17},{"ruleId":"485","severity":1,"message":"486","line":249,"column":37,"nodeType":"487","endLine":252,"endColumn":39},{"ruleId":"494","severity":1,"message":"495","line":5,"column":5,"nodeType":"496","messageId":"497","endLine":7,"endColumn":6},{"ruleId":"485","severity":1,"message":"486","line":19,"column":29,"nodeType":"487","endLine":19,"endColumn":77},{"ruleId":"485","severity":1,"message":"486","line":21,"column":29,"nodeType":"487","endLine":26,"endColumn":31},{"ruleId":"450","severity":1,"message":"492","line":8,"column":8,"nodeType":"452","messageId":"453","endLine":8,"endColumn":16},{"ruleId":"450","severity":1,"message":"498","line":11,"column":8,"nodeType":"452","messageId":"453","endLine":11,"endColumn":20},{"ruleId":"450","severity":1,"message":"493","line":12,"column":8,"nodeType":"452","messageId":"453","endLine":12,"endColumn":17},{"ruleId":"485","severity":1,"message":"486","line":223,"column":37,"nodeType":"487","endLine":226,"endColumn":39},{"ruleId":"499","severity":1,"message":"500","line":284,"column":1,"nodeType":"501","messageId":"502","endLine":304,"endColumn":2},{"ruleId":"494","severity":1,"message":"495","line":5,"column":5,"nodeType":"496","messageId":"497","endLine":7,"endColumn":6},{"ruleId":"450","severity":1,"message":"503","line":18,"column":13,"nodeType":"452","messageId":"453","endLine":18,"endColumn":25},{"ruleId":"450","severity":1,"message":"482","line":19,"column":13,"nodeType":"452","messageId":"453","endLine":19,"endColumn":36},{"ruleId":"450","severity":1,"message":"504","line":20,"column":13,"nodeType":"452","messageId":"453","endLine":20,"endColumn":36},{"ruleId":"485","severity":1,"message":"486","line":132,"column":29,"nodeType":"487","endLine":141,"endColumn":31},{"ruleId":"499","severity":1,"message":"500","line":37,"column":1,"nodeType":"501","messageId":"502","endLine":51,"endColumn":2},{"ruleId":"485","severity":1,"message":"486","line":22,"column":25,"nodeType":"487","endLine":25,"endColumn":27},{"ruleId":"485","severity":1,"message":"486","line":27,"column":25,"nodeType":"487","endLine":32,"endColumn":27},{"ruleId":"450","severity":1,"message":"461","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":13},{"ruleId":"505","severity":1,"message":"506","line":174,"column":21,"nodeType":"507","endLine":174,"endColumn":50},{"ruleId":"505","severity":1,"message":"506","line":207,"column":13,"nodeType":"507","endLine":207,"endColumn":43},{"ruleId":"450","severity":1,"message":"508","line":6,"column":10,"nodeType":"452","messageId":"453","endLine":6,"endColumn":16},{"ruleId":"450","severity":1,"message":"488","line":4,"column":8,"nodeType":"452","messageId":"453","endLine":4,"endColumn":13},{"ruleId":"450","severity":1,"message":"491","line":5,"column":8,"nodeType":"452","messageId":"453","endLine":5,"endColumn":10},{"ruleId":"485","severity":1,"message":"486","line":162,"column":45,"nodeType":"487","endLine":165,"endColumn":47},{"ruleId":"509","severity":1,"message":"510","line":158,"column":25,"nodeType":"511","endLine":158,"endColumn":61},{"ruleId":"499","severity":1,"message":"500","line":26,"column":1,"nodeType":"501","messageId":"502","endLine":31,"endColumn":2},{"ruleId":"499","severity":1,"message":"500","line":33,"column":1,"nodeType":"501","messageId":"502","endLine":38,"endColumn":2},{"ruleId":"450","severity":1,"message":"491","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":10},{"ruleId":"450","severity":1,"message":"488","line":3,"column":8,"nodeType":"452","messageId":"453","endLine":3,"endColumn":13},{"ruleId":"450","severity":1,"message":"508","line":2,"column":10,"nodeType":"452","messageId":"453","endLine":2,"endColumn":16},{"ruleId":"450","severity":1,"message":"512","line":3,"column":8,"nodeType":"452","messageId":"453","endLine":3,"endColumn":19},{"ruleId":"513","severity":1,"message":"514","line":22,"column":13,"nodeType":"487","endLine":26,"endColumn":14},{"ruleId":"470","severity":1,"message":"471","line":26,"column":13,"nodeType":"472","messageId":"473","endLine":26,"endColumn":60},{"ruleId":"450","severity":1,"message":"491","line":2,"column":8,"nodeType":"452","messageId":"453","endLine":2,"endColumn":10},{"ruleId":"450","severity":1,"message":"515","line":5,"column":8,"nodeType":"452","messageId":"453","endLine":5,"endColumn":23},{"ruleId":"450","severity":1,"message":"492","line":8,"column":8,"nodeType":"452","messageId":"453","endLine":8,"endColumn":16},{"ruleId":"450","severity":1,"message":"498","line":11,"column":8,"nodeType":"452","messageId":"453","endLine":11,"endColumn":20},{"ruleId":"450","severity":1,"message":"493","line":12,"column":8,"nodeType":"452","messageId":"453","endLine":12,"endColumn":17},{"ruleId":"485","severity":1,"message":"486","line":183,"column":37,"nodeType":"487","endLine":186,"endColumn":39},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","no-native-reassign",["516"],"no-negated-in-lhs",["517"],"'Authorize' is defined but never used.","'test' is defined but never used.","'MasterSearch' is defined but never used.","'axios' is defined but never used.","'getAxios' is defined but never used.","'Link' is defined but never used.","'Login' is defined but never used.","'Modal' is defined but never used.","'handlePages' is defined but never used.","'GlobalContext' is defined but never used.","'getFeed' is defined but never used.","'getAuthorizationURL' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'history' is assigned a value but never used.","'match' is assigned a value but never used.","'SearchForSubreddit' is defined but never used.","'SearchSVG' is defined but never used.","'postIdParam' is assigned a value but never used.","'searchSubreddit' is defined but never used.","'currentSubreddit' is defined but never used.","'title' is assigned a value but never used.","'banner_background_color' is assigned a value but never used.","'header_img' is assigned a value but never used.","'user_is_subscriber' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Axios' is defined but never used.","'Redirect' is defined but never used.","'ErrorPage' is defined but never used.","'qs' is defined but never used.","'HeartSVG' is defined but never used.","'AuthorSVG' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'DownArrowSVG' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'header_title' is assigned a value but never used.","'banner_background_image' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Player' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'ReactPlayer' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'SubredditSearch' is defined but never used.","no-global-assign","no-unsafe-negation"]